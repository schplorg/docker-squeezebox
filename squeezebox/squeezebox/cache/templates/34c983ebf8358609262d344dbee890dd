#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1249312473',
        'name' => 'html/vars.js',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "// useful global vars for javascripts needing info from template toolkit on page loads.\n	var webroot       = \"";
#line 2 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('webroot');
    $output .=  "\";\n	";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    if ($stash->get('refresh')) {
    $output .=  "var refreshtime   = \"";
#line 3 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('refresh');
    $output .=  "\";";
    }
    
    $output .=  "\n	var player        = \"";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('playerURI');
    $output .=  "\";\n	var playerid      = \"";
#line 5 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('player');
    $output .=  "\";\n	var url           = \"";
#line 6 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('statusroot');
    $output .=  "\";\n	var statusroot    = \"";
#line 7 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('statusroot');
    $output .=  "\";\n	var browserTarget;\n	";
#line 9 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    if ($stash->get('browserTarget')) {
    $output .=  "browserTarget = \"";
#line 9 "/usr/share/squeezeboxserver/HTML/EN/html/vars.js"
    $output .=  $stash->get('browserTarget');
    $output .=  "\";";
    }
    
    $output .=  "\n	var orderByUrl    = '';\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
