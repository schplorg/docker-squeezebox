#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1249312473',
        'name' => 'html/LiveSearch.js',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "LiveSearch = {\n	init: function() {\n		var input = Ext.get('headerSearchInput');\n		var button = Ext.get('headerSearchBtn');\n\n		if (input && button) {\n			button.on({\n				mouseover: function(){\n					input.setDisplayed(true);\n					input.focus();\n				}\n			});\n\n			if (!hideSearchTimer)\n				hideSearchTimer = new Ext.util.DelayedTask();\n			\n			input.on({\n				click: function() { hideSearchTimer.cancel(); },\n				focus: function() { hideSearchTimer.cancel(); },\n				blur: function(){ hideSearchTimer.delay(2000); }\n			});\n\n			sinput = new Ext.form.TextField({\n				applyTo: input,\n				validationDelay: 100,\n				validateOnBlur: false,\n				selectOnFocus: true,\n\n				searchMenu: new Ext.menu.Menu({\n					width: 250,\n					autoScroll: false,\n					maxHeight: document.height - 300,\n					items: [],\n					show: function() {\n						if (!this.el)\n							this.render();\n\n						var xy = [input.getX(), input.getY() + input.getHeight()];\n\n						// set the position so we can figure out the constrain value.\n						this.el.setXY(xy);\n						//constrain the value, keep the y coordinate the same\n						xy[1] = this.constrainScroll(xy[1]);\n						xy = [this.el.adjustForConstraints(xy)[0], xy[1]];\n\n						this.el.setXY(xy);\n						this.el.show();\n						Ext.menu.Menu.superclass.onShow.call(this);\n						if(Ext.isIE){\n							// internal event, used so we don't couple the layout to the menu\n							this.fireEvent('autosize', this);\n							if (!Ext.isIE8){\n								this.el.repaint();\n							}\n						}\n						this.hidden = false;\n						this.fireEvent('show', this);\n					},\n\n					links : {\n						track: new Ext.Template( webroot + 'songinfo.html?player={player}&item={id}'),\n						album: new Ext.Template( webroot + 'clixmlbrowser/clicmd=browselibrary+items&mode=albums&linktitle=' + SqueezeJS.string('album') + '%20({title})&album_id={id}&player={player}/index.html?index=0'),\n						contributor: new Ext.Template( webroot + 'clixmlbrowser/clicmd=browselibrary+items&mode=albums&linktitle=' + SqueezeJS.string('artist') + '%20({title})&artist_id={id}&player={player}/'),\n						search: new Ext.Template( webroot + 'clixmlbrowser/clicmd=browselibrary+items&linktitle=' + SqueezeJS.string('search') + '&mode=search/index.html?player={player}&index={id}&submit=Search&q={title}'),\n						item: new Ext.Template( '<div>{title}<span class=\"browsedbControls\"><img src=\"' + webroot + 'html/images/b_play.gif\" id=\"play:{id}:{title}\" class=\"livesearch-play\">&nbsp;<img src=\"' + webroot + 'html/images/b_add.gif\" id=\"add:{id}:{title}\" class=\"livesearch-add\"></span></div>')\n					},\n					\n					listeners: {\n						click: function(self, menuItem, e) {\n							var target = e ? e.getTarget() : null;\n							\n							// check whether user clicked one of the playlist controls\n							if ( target && Ext.id(target).match(/^(add|play)/) ) {\n								self.playAddAction(target);\n\n								return;\n							}\n							\n							var type;\n							if (menuItem.track_id) {\n								type = 'track';\n							}\n							else if (menuItem.album_id) {\n								type = 'album';\n							}\n							else if (menuItem.contributor_id) {\n								type = 'contributor';\n							}\n							else if (menuItem.search_id != null) {\n								type = 'search';\n							}\n							\n							if (!type || !self.links[type]) {\n								return;\n							}\n							\n							location = self.links[type].apply({\n								id: menuItem.track_id || menuItem.album_id || menuItem.contributor_id || menuItem.search_id,\n								title: encodeURIComponent(menuItem.search_id != null ? input.dom.value : menuItem.title),\n								player: SqueezeJS.getPlayer()\n							});\n						},\n						\n						// don't hide the menu if add/play was pressed, the user might want to add more\n						beforehide: function(self) {\n							if (self.playActionTriggered) {\n								delete self.playActionTriggered;\n								return false;\n							}\n						},\n						\n						afterrender: function(self) {\n							new Ext.KeyMap(self.id, {\n								key: 'ap',\n								fn: function(key, e) {\n									if (!e)\n										return;\n									\n									var selector;\n									if (e.getKey() == e.A) {\n										selector = 'img.livesearch-add';\n									}\n									else if (e.getKey() == e.P) {\n										selector = 'img.livesearch-play';\n									}\n\n									if (selector) {\n										var item = e.getTarget(null, null, true);\n										if (item) {\n											self.playAddAction(item.child(selector));\n										}\n									}\n								}\n							});\n						}\n					},\n					\n					playAddAction: function(target) {\n						if (!target)\n							return;\n						\n						var params = Ext.id(target).split(':');\n\n						if (params.length > 2) {\n							SqueezeJS.Controller.playerRequest({\n								params: ['playlistcontrol', 'cmd:' + (params[0] == 'play' ? 'load' : params[0]), (params[1] == 'contributor_id' ? 'artist_id' : params[1]) + ':' + params[2] ],\n								showBriefly: params.slice(3).join(':')\n							});\n							\n							self.playActionTriggered = true;\n						}\n					}\n				}),\n\n				validator: function(value){\n					if (value.length > 0) {\n						SqueezeJS.Controller.playerRequest({\n							params: [ 'search', 0, 5, 'term:' + value, 'extended:1' ],\n							success: function(response){\n								this.searchMenu.removeAll();\n								\n								if (response && response.responseText) {\n									response = Ext.util.JSON.decode(response.responseText);\n									var result = response.result;\n									var tpl = this.searchMenu.links['item'];\n									\n									if (result.contributors_loop) {\n										if (this.searchMenu.items.length > 0)\n											this.searchMenu.addItem('-');\n										\n										this.searchMenu.addItem({\n											text: '<b>' + SqueezeJS.string('artists') + '...</b>',\n											icon: '/html/images/b_search.gif',\n											search_id: 0\n										});\n										\n										Ext.each(result.contributors_loop, function(item, index, allItems) {\n											this.searchMenu.addItem({\n												text: tpl.apply({\n													title: item.contributor,\n													id: 'contributor_id:' + item.contributor_id\n												}),\n												title: item.contributor,\n												contributor_id: item.contributor_id\n											});\n										}, this);\n									}\n									\n									if (result.albums_loop) {\n										if (this.searchMenu.items.length > 0)\n											this.searchMenu.addItem('-');\n										\n										this.searchMenu.addItem({\n											text: '<b>' + SqueezeJS.string('albums') + '...</b>',\n											icon: '/html/images/b_search.gif',\n											search_id: 1\n										});\n										\n										Ext.each(result.albums_loop, function(item, index, allItems) {\n											this.searchMenu.addItem({\n												text: tpl.apply({\n													title: item.album,\n													id: 'album_id:' + item.album_id\n												}),\n												title: item.album,\n												icon: '/music/' + (item.artwork || 0) + '/cover_50x50_o',\n												album_id: item.album_id\n											});\n										}, this);\n									}\n									\n									if (result.tracks_loop) {\n										if (this.searchMenu.items.length > 0)\n											this.searchMenu.addItem('-');\n										\n										this.searchMenu.addItem({\n											text: '<b>' + SqueezeJS.string('songs') + '...</b>',\n											icon: '/html/images/b_search.gif',\n											search_id: 2\n										});\n										\n										Ext.each(result.tracks_loop, function(item, index, allItems) {\n											this.searchMenu.addItem({\n												text: tpl.apply({\n													title: item.track,\n													id: 'track_id:' + item.track_id\n												}),\n												title: item.track,\n												icon: '/music/' + (item.coverid || 0) + '/cover_50x50_o',\n												track_id: item.track_id\n											});\n										}, this);\n									}\n									\n									if (this.searchMenu.items.length <= 0) {\n										this.searchMenu.addItem({\n											text: '<b>' + SqueezeJS.string('no_search_results') + '</b>'\n										});\n									}\n\n									this.searchMenu.show();\n								}\n							},\n							scope: this\n						});\n					}\n\n					return true;\n				},\n				\n				scope: this,\n\n				// overwrite default filter to ignore key modifiers\n				filterValidation : function(e){\n					if ((!e.isNavKeyPress() && !e.isSpecialKey()) || e.getKey() == e.BACKSPACE) {\n						this.validationTask.delay(this.validationDelay);\n					}\n				},\n				\n				listeners: {\n					// validate as soon as the input gets the focus, so we don't lose the menu if we come back from the menu\n					focus: function() {\n						this.validationTask.delay(0);\n					},\n					specialkey: function(field, e) {\n						if (e.getKey() == e.DOWN) {\n							this.searchMenu.focus();\n						}\n					}\n				}\n			});\n			\n			hideSearchTimer = new Ext.util.DelayedTask(function(){\n				if (sinput && sinput.searchMenu && sinput.searchMenu.isVisible()) {\n					hideSearchTimer.delay(2000);\n				} \n				else {\n					input.setDisplayed(false);\n				}\n			});\n			\n			SqueezeJS.loadStrings(['ARTISTS', 'ARTIST', 'ALBUMS', 'ALBUM', 'SONGS', 'NO_SEARCH_RESULTS', 'SEARCH']);\n		}\n	}\n};";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
