#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js',
        'modtime' => '1249312473',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    $output .=  $context->process('jsString', { 'id' => 'PLUGIN_DNDPLAY_NO_ITEMS', 'jsId' => '' });
#line 1 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    $output .=  $context->process('jsString', { 'id' => 'PLAYLIST_NO_ITEMS_FOUND', 'jsId' => 'noItemsFound' });
#line 1 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    $output .=  $context->process('jsString', { 'id' => 'ADDING_TO_PLAYLIST', 'jsId' => '' });
    
    $output .=  "\n\nSqueezeJS.Strings['fileTooLarge'] = \"";
#line 7 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('replace', [ '"', '\"' ])
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('fileTooLarge');
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "\";\n	\nSqueezeJS.DnD = {\n	maxUploadSize: ";
#line 10 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    $output .=  $stash->get('maxUploadSize');
    $output .=  ",\n	validTypeExtensions: '";
#line 11 "/usr/share/perl5/Slim/Plugin/DnDPlay/HTML/Default/js-main-dd.js"
    $output .=  $stash->get('validTypeExtensions');
    $output .=  "'\n};\n	\nif (window.File && window.FileList) {\n	FileDnD = {\n		queue: new Array,\n		\n		// enable file d'n'd handler\n		init: function() {\n			// Setup the dnd listeners.\n			Ext.get('rightcontent').on({\n				dragover: this.handleDragOver,\n				drop: this.handleFileSelect,\n				scope: this\n			});\n		},\n		\n		handleFileSelect: function(ev) {\n			var evt = ev.browserEvent;\n			\n			evt.stopPropagation();\n			evt.preventDefault();\n	\n			var files = evt.dataTransfer.files; // FileList object.\n			var added = 0;\n			\n			var error;\n\n			// create a list of the files we want to play - we create an Array, as we can't pop items from the FileList object\n			for (var i = 0, file; file = files[i]; i++) {\n				// only upload audio files\n				if (file.type.match('audio') || file.name.match(SqueezeJS.DnD.validTypeExtensions)) {\n					added++;\n					this.queue.push(file);\n				}\n			}\n\n			if (added > 0) {\n				var action = 'add';\n				\n				if (evt.shiftKey && SqueezeJS.Controller.playerStatus.playlist_tracks > 0) {\n					SqueezeJS.Controller.playerControl(['playlist', 'clear']);\n					action = 'play';\n				}\n				else if (SqueezeJS.Controller.playerStatus.playlist_tracks == 0) {\n					action = 'play';\n				}\n				\n				this.handleFile(action);\n			}\n			else {\n				Ext.Msg.alert(SqueezeJS.string('noItemsFound'), SqueezeJS.string('plugin_dndplay_no_items'));\n			}\n		},\n		\n		handleDragOver: function(ev) {\n			var evt = ev.browserEvent;\n			evt.stopPropagation();\n		    evt.preventDefault();\n		    evt.dataTransfer.dropEffect = 'copy';\n		},\n		\n		handleFile: function(action) {\n			var file = this.queue.shift();\n			\n			if (!file) {\n				// nothing left to do - stop the status update task\n				Ext.TaskMgr.stop(this.statusUpdater);\n				this.statusUpdater = null;\n				SqueezeJS.Controller.getStatus();\n				return;\n			}\n\n			if (file.name)\n				this.showBriefly(SqueezeJS.string('adding_to_playlist') + ' ' + file.name);\n\n			SqueezeJS.Controller.playerRequest({\n				params: ['playlist', (action || 'add') + 'match', 'name:' + file.name, 'size:' + (file.size || 0), 'timestamp:' + Math.floor(file.lastModified / 1000), 'type:' + (file.type || 'unk')],\n				success: function(response){\n					if (!this.statusUpdater) {\n						SqueezeJS.Controller.getStatus();\n						this.statusUpdater = {\n							run: SqueezeJS.Controller.getStatus,\n							interval: 2000\n						};\n						Ext.TaskMgr.start(this.statusUpdater);\n					}\n\n					if (response && response.responseText) {\n						response = Ext.util.JSON.decode(response.responseText);\n\n						if (response && response.result) {\n							if ( response.result.maxUploadSize && Number.isInteger(response.result.maxUploadSize) ) {\n								SqueezeJS.DnD.maxUploadSize = response.result.maxUploadSize;\n							}\n							\n							if (response.result.upload) {\n								if (file.size && file.size > SqueezeJS.DnD.maxUploadSize) {\n									Ext.Msg.alert(\n										file.name, \n										String.format(\n											SqueezeJS.string('fileTooLarge'), \n											Math.floor(file.size / 1024 / 1024) + 'MB', \n											Math.floor(SqueezeJS.DnD.maxUploadSize / 1024 / 1024) + 'MB'\n										)\n									);\n								}\n								else {\n									file.key = response.result.upload;\n									this.uploadFile(file, action);\n									return;\n								}\n							}\n							else if (response.result.error) {\n								Ext.Msg.alert(\n									file.name, \n									response.result.error\n								);\n							}\n						}\n					}\n\n					this.handleFile();\n				},\n				scope: this\n			});\n		},\n		\n		uploadFile: function(file, action) {\n			var xhr = new XMLHttpRequest();    // den AJAX Request anlegen\n			xhr.open('POST', '/plugins/dndplay/upload');    // Angeben der URL und des Requesttyps\n			\n			var scope = this;\n			xhr.onreadystatechange = function() {\n				if (xhr.readyState == 4) {\n					if (xhr.responseText) {\n						var response = Ext.util.JSON.decode(xhr.responseText);\n						if (response && response.error) {\n							Ext.Msg.alert(SqueezeJS.string('noItemsFound'), response.error);\n						}\n					}\n					this.handleFile();\n				}\n			}.createDelegate(this);\n			\n			var progress = -1;\n			xhr.upload.addEventListener(\"progress\", function(e) {\n				var p = parseInt(e.loaded / e.total * 100);\n				// only update progress information when the value has changed\n				if (p > progress) {\n					this.showBriefly(String.format(SqueezeJS.string('adding_to_playlist') + ' {0} ({1}%)', file.name, p));\n					progress = p;\n				}\n			}.createDelegate(this), false);\n			\n			var formdata = new FormData();    // Anlegen eines FormData Objekts zum Versenden unserer Datei\n			formdata.append('action', action || 'add');\n			formdata.append('name', file.name);\n			formdata.append('size', file.size);\n			formdata.append('type', file.type);\n			formdata.append('timestamp', Math.floor(file.lastModified / 1000))\n			\n			if (file.key)\n				formdata.append('key', file.key);\n			\n			formdata.append('uploadfile', file);  // AnhÃ¤ngen der Datei an das Objekt\n			xhr.send(formdata); \n		},\n		\n		// use main status area, but don't use showBriefly to get more frequent updates without the flicker\n		showBriefly: function(text) {\n			var statusArea = Main.showBrieflyArea;\n			var statusAreaEl = statusArea ? statusArea.getEl() : null;\n			if (statusAreaEl && statusAreaEl.hasActiveFx()) {\n				statusAreaEl.stopFx();\n				statusArea.template.overwrite(statusAreaEl, { msg: text });\n				statusAreaEl.pause(2).fadeOut();\n			}\n			else {\n				SqueezeJS.Controller.showBriefly(text);\n			}\n		}\n	};\n\n	Ext.onReady(function() {\n		FileDnD.init();\n	}, FileDnD);\n}";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
