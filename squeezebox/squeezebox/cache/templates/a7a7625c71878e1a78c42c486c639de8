#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'html/SqueezeJS/UI.js',
        'modtime' => '1249312473',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "// initialize some strings\nExt.onReady(function(){\n	SqueezeJS.loadStrings([\n		'POWER', 'PLAY', 'PAUSE', 'NEXT', 'PREVIOUS', 'CONNECTING_FOR', 'BROWSE', 'REPEAT', 'SHUFFLE',\n		'BY', 'FROM', 'ON', 'OFF', 'YES', 'NO', 'COLON', 'SQUEEZEBOX_SERVER', 'SQUEEZENETWORK', 'VOLUME',\n		'CLOSE', 'CANCEL', 'CHOOSE_PLAYER', 'SYNCHRONIZE'\n	]);\n});\n\n// some common components for the player control\nSqueezeJS.UI = {\n	// add some custom events we'll be using to our base class\n	Component : Ext.extend(Ext.Component, {\n		initComponent : function(config){\n			if (typeof config == 'string')\n				config = { el: config };\n\n			Ext.apply(this, config);\n			SqueezeJS.UI.Component.superclass.initComponent.call(this);\n	\n			this.el = Ext.get(this.el);\n	\n			// subscribe to some default events\n			SqueezeJS.Controller.on({\n				'playlistchange': {\n					fn: this.onPlaylistChange,\n					scope: this\n				},\n				'playerstatechange': {\n					fn: this.onPlayerStateChange,\n					scope: this\n				}\n			});\n		},\n\n		onPlaylistChange : function(){},\n		onPlayerStateChange : function(){}\n	}),\n\n	progressCursorTimer : new Ext.util.DelayedTask(),\n	\n	setProgressCursor : function(timeout){\n		var el = Ext.get(document.body);\n		el.mask();\n\n		this.progressCursorTimer.delay(timeout || 500, function(){\n			el.unmask();\n		});\n	},\n	\n	Buttons : {}\n};\n\n\nSqueezeJS.UI.ScrollPanel = {\n	offset : 0,\n	el : null,\n\n	init : function() {\n		var el;\n		this.offset = 0;\n\n		if (el = Ext.get('infoTab'))\n			this.offset += el.getHeight();\n\n		if (el = Ext.get('pageFooterInfo'))\n			this.offset += el.getHeight();\n\n		if ((el = Ext.get('browsedbList')) ||\n			((el = Ext.get('content')) && el.hasClass('scrollingPanel'))) {\n\n			this.el = el;\n			this.offset += this.el.getTop();\n\n			Ext.EventManager.onWindowResize(this.onResize, this);\n			this.onResize();\n		}\n	},\n\n	onResize : function(){\n		this.el.setHeight( Ext.fly(document.body).getViewSize().height - this.offset );\n	}\n};\n\n\n// graphical button, defined in three element sprite for normal, mouseover, pressed\nif (Ext.Button) {\n	\n	SqueezeJS.UI.Button = Ext.extend(Ext.Button, {\n		power: 0,\n		cmd : null,\n		cmd_id : null,\n		cls : '',\n		config: {},\n	\n		initComponent : function(){\n			this.tooltipType = this.initialConfig.tooltipType || 'title';\n	\n			if (this.initialConfig.template)\n				this.template = this.initialConfig.template;\n			else if (SqueezeJS.UI.buttonTemplate)\n				this.template = SqueezeJS.UI.buttonTemplate;\n	\n			// if we want a pure graphical button, overwrite text and setText method\n			if (this.noText) {\n				this.text = '';\n				this.setText = function(){};\n			}\n	\n			SqueezeJS.UI.Button.superclass.initComponent.call(this);\n	\n			SqueezeJS.Controller.on({\n				'playerstatechange': {\n					fn: this._beforePlayerStateChange,\n					scope: this\n				},\n				'buttonupdate': {\n					fn: this._beforePlayerStateChange,\n					scope: this\n				}\n			});\n	\n	\n			this.on({\n				'render': {\n					fn: function() {\n						if (this.minWidth) {\n							var btnEl = this.el.child(\"button:first\");\n							Ext.get(btnEl).setWidth(this.minWidth);\n						}\n					},\n					scope: this\n				}\n			});\n		},\n	\n		_beforePlayerStateChange : function(result){\n			this.power = (result.power == null) || result.power; \n	\n			if (this.cmd_id) {\n	\n				// update custom handler for stations overwriting default behavior\n				if (result.playlist_loop && result.playlist_loop[0] \n					&& result.playlist_loop[0].buttons && result.playlist_loop[0].buttons[this.cmd_id]) {\n		\n					var btn = result.playlist_loop[0].buttons[this.cmd_id];\n		\n					if (btn.cls)\n						this.setClass(btn.cls);\n					else if (btn.icon)\n						this.setIcon(btn.icon);\n		\n					if (btn.tooltip)\n						this.setTooltip(btn.tooltip);\n	\n					if (this.textOnly && btn.tooltip)\n						this.setText(btn.tooltip);\n	\n					if (btn.command)\n						this.cmd = btn.command;\n				}\n				else {\n					// reset button\n					this.cmd   = '';\n					this.state = -1;\n				}\n			}\n	\n			this.onPlayerStateChange(result);\n		},\n	\n		onPlayerStateChange : function(result){},\n	\n		setTooltip: function(tooltip){\n			this.tooltip = tooltip;\n	\n			if (this.textOnly)\n				this.setText(this.tooltip);\n			\n			var btnEl = this.el.child(\"button:first\");\n	\n			if(typeof this.tooltip == 'object'){\n				Ext.QuickTips.tips(Ext.apply({\n					target: btnEl.id\n				}, this.tooltip));\n			} \n			else {\n				btnEl.dom[this.tooltipType] = this.tooltip;\n			}\n		},\n	\n		setText : function(text){\n			this.text = text;\n	\n			if (this.el)\n				this.el.child(this.buttonSelector).update(text);\n		},\n	\n		setClass: function(newClass) {\n			this.el.removeClass(this.cls);\n			this.cls = newClass\n			this.el.addClass(this.cls);\n		},\n	\n		setIcon: function(newIcon) {\n			var btnEl = this.el.child(\"button:first\");\n			if (btnEl)\n				btnEl.setStyle('background-image', newIcon ? 'url(' + SqueezeJS.Controller.getBaseUrl() + webroot + newIcon + ')' : '');\n		}\n	});\n\n\n	// common button and label components, automatically updated on player events\n	SqueezeJS.UI.Buttons.Play = Ext.extend(SqueezeJS.UI.Button, {\n		isPlaying: false,\n	\n		initComponent : function(){\n			this.cls = this.cls || 'btn-play'; \n			this.tooltip = this.tooltip || SqueezeJS.string('play');\n			this.text = this.text || SqueezeJS.string('play');\n			SqueezeJS.UI.Buttons.Play.superclass.initComponent.call(this);\n		},\n	\n		handler: function(){\n			if (this.isPlaying) {\n				this.updateState(false);\n				SqueezeJS.Controller.playerControl(['pause']);\n			}\n			else {\n				this.updateState(true);\n				SqueezeJS.Controller.playerControl(['play']);\n			}\n		},\n	\n		onPlayerStateChange: function(result){\n			var newState = (result.mode == 'play');\n	\n			if (this.isPlaying != newState) {\n				this.updateState(newState);\n			}\n		},\n	\n		updateState: function(isPlaying){\n			var playEl = Ext.get(Ext.DomQuery.selectNode('table:first', Ext.get(this.initialConfig.renderTo).dom));\n	\n			playEl.removeClass(['btn-play', 'btn-pause']);\n			playEl.addClass(isPlaying ? 'btn-pause' : 'btn-play');\n	\n			this.setTooltip(isPlaying ? SqueezeJS.string('pause') : SqueezeJS.string('play'));\n			this.setText(isPlaying ? SqueezeJS.string('pause') : SqueezeJS.string('play'));\n			this.isPlaying = isPlaying;\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.Rew = Ext.extend(SqueezeJS.UI.Button, {\n		initComponent : function(){\n			this.cls = this.cls || 'btn-previous'; \n			this.tooltip = this.tooltip || SqueezeJS.string('previous');\n			this.text = this.text || SqueezeJS.string('previous');\n			this.skipCmd = ['button', 'jump_rew'];\n	\n			SqueezeJS.UI.Buttons.Rew.superclass.initComponent.call(this);\n			\n			SqueezeJS.Controller.on({\n				'playerselected': {\n					fn: function(playerobj) {\n						if (playerobj.isplayer)\n							this.skipCmd = ['button', 'jump_rew'];\n						else\n							this.skipCmd = ['playlist', 'index', '-1'];\n					},\n					scope: this\n				}\n			});\n		},\n	\n		handler: function(){\n			if (this.power)\n				SqueezeJS.Controller.playerControl(this.skipCmd);\n		},\n	\n		onPlayerStateChange: function(result){\n			if (result.playlist_loop && result.playlist_loop[0] && result.playlist_loop[0].buttons) {\n				try { this.setDisabled(!result.playlist_loop[0].buttons.rew) }\n				catch(e){}\n			}\n			else if (this.disabled)\n				this.enable();\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.Fwd = Ext.extend(SqueezeJS.UI.Button, {\n		initComponent : function(){\n			this.cls = this.cls || 'btn-next';\n			this.tooltip = this.tooltip || SqueezeJS.string('next');\n			this.text = this.text || SqueezeJS.string('next');\n			this.skipCmd = ['button', 'jump_fwd'];\n			\n			SqueezeJS.UI.Buttons.Fwd.superclass.initComponent.call(this);\n			\n			SqueezeJS.Controller.on({\n				'playerselected': {\n					fn: function(playerobj) {\n						// http clients don't know IR commands\n						if (playerobj.isplayer)\n							this.skipCmd = ['button', 'jump_fwd'];\n						else\n							this.skipCmd = ['playlist', 'index', '+1'];\n					},\n					scope: this\n				}\n			});\n		},\n	\n		handler: function(){\n			if (this.power)\n				SqueezeJS.Controller.playerControl(this.skipCmd);\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.Repeat = Ext.extend(SqueezeJS.UI.Button, {\n		cmd_id: 'repeat',\n		state: -1,\n	\n		initComponent : function(){\n			this.cls = this.initialConfig.cls || 'btn-repeat-0';\n			SqueezeJS.UI.Buttons.Repeat.superclass.initComponent.call(this);\n		},\n	\n		handler: function(){\n			if (this.power) {\n				if (this.cmd)\n					SqueezeJS.Controller.playerControl(this.cmd);\n				else\n					SqueezeJS.Controller.playerControl(['playlist', 'repeat', (this.state + 1) % 3]);\n			} \n		},\n	\n		onPlayerStateChange: function(result){\n			if (this.cmd) {}\n			else if (this.state == -1 || (result['playlist repeat'] != null && this.state != result['playlist repeat']))\n				this.updateState(result['playlist repeat']);\n	\n		},\n	\n		updateState: function(newState){\n			this.state = newState || 0;\n			this.setIcon('');\n			this.setTooltip(SqueezeJS.string('repeat') + ' - ' + SqueezeJS.string('repeat' + this.state));\n			this.setText(SqueezeJS.string('repeat') + ' - ' + SqueezeJS.string('repeat' + this.state));\n			this.setClass('btn-repeat-' + this.state);\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.Shuffle = Ext.extend(SqueezeJS.UI.Button, {\n		cmd_id: 'shuffle',\n		state: -1,\n	\n		initComponent : function(){\n			this.cls = this.initialConfig.cls || 'btn-shuffle-0';\n			this.tooltip = this.tooltip || SqueezeJS.string('shuffle');\n			this.text = this.text || SqueezeJS.string('shuffle');\n			SqueezeJS.UI.Buttons.Shuffle.superclass.initComponent.call(this);\n		},\n	\n		handler: function(){\n			if (this.power) {\n				if (this.cmd)\n					SqueezeJS.Controller.playerControl(this.cmd);\n				else\n					SqueezeJS.Controller.playerControl(['playlist', 'shuffle', (this.state + 1) % 3]);\n			} \n		},\n	\n		onPlayerStateChange: function(result){\n			if (this.cmd) {}\n			else if (this.state == -1 || (result['playlist shuffle'] != null && this.state != result['playlist shuffle']))\n				this.updateState(result['playlist shuffle']);\n	\n		},\n	\n		updateState: function(newState){\n			this.state = newState || 0;\n			this.setIcon('');\n			this.setTooltip(SqueezeJS.string('shuffle') + ' - ' + SqueezeJS.string('shuffle' + this.state));\n			this.setText(SqueezeJS.string('shuffle') + ' - ' + SqueezeJS.string('shuffle' + this.state));\n			this.setClass('btn-shuffle-' + this.state);\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.Power = Ext.extend(SqueezeJS.UI.Button, {\n		initComponent : function(){\n			this.cls = this.cls || 'btn-power';\n			this.tooltip = this.tooltip || SqueezeJS.string('power');\n			this.text = this.text || SqueezeJS.string('power') + ' ' + SqueezeJS.string(this.power ? 'on' : 'off');\n			SqueezeJS.UI.Buttons.Power.superclass.initComponent.call(this);\n	\n			SqueezeJS.Controller.on({\n				playerselected: {\n					fn: function(playerobj) {\n						this.setVisible(playerobj && playerobj.canpoweroff)\n					},\n					scope: this\n				}\n			});\n		},\n	\n		handler: function(){\n			var newState = (this.power ? '0' : '1');\n			this.power = !this.power;\n			this.onPlayerStateChange();\n			SqueezeJS.Controller.playerControl(['power', newState]);\n		},\n	\n		onPlayerStateChange: function(result){\n			this.setTooltip(SqueezeJS.string('power') + SqueezeJS.string('colon') + ' ' + SqueezeJS.string(this.power ? 'on' : 'off'));\n			this.setText(SqueezeJS.string('power') + SqueezeJS.string('colon') + ' ' + SqueezeJS.string(this.power ? 'on' : 'off'));\n	\n			if (this.power)\n				this.el.removeClass('btn-power-off');\n			else\n				this.el.addClass('btn-power-off');\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.VolumeDown = Ext.extend(SqueezeJS.UI.Button, {\n		initComponent : function(){\n			this.cls = this.cls || 'btn-volume-decrease';\n			this.tooltip = this.tooltip || SqueezeJS.string('volumedown');\n			this.text = this.text || SqueezeJS.string('volumedown');\n			SqueezeJS.UI.Buttons.VolumeUp.superclass.initComponent.call(this);\n		},\n	\n		handler : function(){\n			if (this.power)\n				SqueezeJS.Controller.setVolume(1, '-');\n		}\n	});\n	\n	SqueezeJS.UI.Buttons.VolumeUp = Ext.extend(SqueezeJS.UI.Button, {\n		initComponent : function(){\n			this.cls = this.cls || 'btn-volume-increase';\n			this.tooltip = this.tooltip || SqueezeJS.string('volumeup');\n			this.text = this.text || SqueezeJS.string('volumeup');\n			SqueezeJS.UI.Buttons.VolumeUp.superclass.initComponent.call(this);\n		},\n	\n		handler : function(){\n			if (this.power)\n				SqueezeJS.Controller.setVolume(1, '+');\n		}\n	});\n\n}\n\n\nif (Ext.SplitButton) {\n\n	SqueezeJS.UI.SplitButton = Ext.extend(Ext.SplitButton, {\n		initComponent : function(){\n			Ext.apply(this, {\n				tooltipType: 'title',\n				template: SqueezeJS.UI.splitButtonTemplate || null,\n				handler: function(ev){\n					if(this.menu && !this.menu.isVisible()){\n						this.menu.show(this.el, this.menuAlign);\n					}\n					this.fireEvent('arrowclick', this, ev);\n				}\n			});\n\n			SqueezeJS.UI.SplitButton.superclass.initComponent.call(this);\n		}\n	});\n\n}\n\n\n\n// specialised TreeLoader to create folder trees\nif (Ext.tree && Ext.tree.TreeLoader) {\n\n	SqueezeJS.UI.FileTreeLoader = function(filter) {\n		Ext.apply(this, {\n			dataUrl: '/jsonrpc.js',\n			filter: filter\n		});\n		SqueezeJS.UI.FileTreeLoader.superclass.constructor.call(this);	\n	};\n	\n	Ext.extend(SqueezeJS.UI.FileTreeLoader, Ext.tree.TreeLoader, {\n		getParams: function(node){\n			var cliQuery = [ 'readdirectory', 0, 99999 ];\n	\n			cliQuery.push(\"folder:\" + node.id);\n	\n			if (this.filter)\n				cliQuery.push(\"filter:\" + this.filter);\n	\n			return Ext.util.JSON.encode({ \n				id: 1,\n				method: \"slim.request\",\n				params: [ \"\", cliQuery ]\n			});\n		},\n	\n		createNode : function(attr){\n			Ext.apply(attr, {\n				id: attr.path,\n				text: attr.name,\n				leaf: (!attr.isfolder > 0),\n				iconCls: (attr.isfolder > 0 ? 'x-tree-node-alwayscollapsed' : '')\n			});\n	\n			return SqueezeJS.UI.FileTreeLoader.superclass.createNode.call(this, attr);\n		},\n	\n		// we have to extract the result ourselves as IE/Opera can't handle multi-node data roots\n		processResponse : function(response, node, callback){\n			try {\n				var o = eval(\"(\" + response.responseText + \")\");\n				o = eval('o.result');\n	\n				SqueezeJS.UI.FileTreeLoader.superclass.processResponse.call(\n					this, { responseText: Ext.util.JSON.encode(o.fsitems_loop) }, node, callback);\n			} catch(e){\n				this.handleFailure(response);\n			}\n		}\n	});\n	\n	// the FileSelector panel component\n	SqueezeJS.UI.FileSelector = Ext.extend(Ext.tree.TreePanel, {\n		initComponent : function(config){\n			Ext.apply(this, config);\n	\n			Ext.apply(this, {\n				rootVisible: false,\n				animate: false,\n				pathSeparator: '|',\n				containerScroll: true,\n				loader: new SqueezeJS.UI.FileTreeLoader(this.filter),\n				root: new Ext.tree.AsyncTreeNode({\n					text: 'root',\n					id: '/'\n				})\n			});\n	\n			SqueezeJS.UI.FileSelector.superclass.initComponent.call(this);\n	\n			// workaround for IE7's inability to overflow unless position:relative is set\n			if (Ext.isIE7) {\n				var parentEl = Ext.get(this.renderTo).parent();\n				parentEl.setStyle('position', 'relative');\n			}\n			\n			this.on({\n				click: this.onClick,\n				collapse: this.onCollapse\n			});\n	\n			this.selectMyPath();\n	\n			// activate button to add path to the selector box\n			var gotoBtn;\n			if (this.gotoBtn && (gotoBtn = Ext.get(this.gotoBtn))) {\n				new Ext.Button({\n					renderTo: gotoBtn,\n					text: '>',\n					handler: this.showPath,\n					scope: this\n				});\n			}\n		},\n	\n		onClick: function(node, e){\n			var input = Ext.get(this.input);\n	\n			if (input != null && input.getValue() != null) {\n				input.dom.value = node.id;\n			}\n		},\n	\n		// clean up collapsed nodes so we can refresh a view\n		onCollapse: function(node){\n			while(node.firstChild){\n				node.removeChild(node.firstChild);\n			}\n	\n			node.childrenRendered = false;\n			node.loaded = false;\n	\n			// add dummy node to prevent file icon instead of folder\n			node.appendChild([]);\n		},\n	\n		selectMyPath: function(){\n			// select the current setting, if available\n			var input = Ext.get(this.input);\n	\n			if (input == null || input.getValue() == null || input.getValue() == '')\n				return;\n	\n			var path = input.getValue();\n			var separator = '/';\n			var result;\n	\n			if (path.match(/^[a-z]:\\\\/i))\n				separator = '\\\\';\n	\n			// only open the first level of UNC paths (\\\\server\\share)\n			else if (result = path.match(/^\\\\\\\\[\\_\\w\\-]+\\\\[\\-\\_\\w ]+[^\\\\]/))\n				path = result[0];\n	\n			path = path.split(separator);\n	\n			var prev = '';\n			var target = this.pathSeparator + this.root.id;\n	\n			// we don't need the root element on *X systems, but on Windows...\n			for (var x=(path[0]=='/' ? 1 : 0); x<path.length; x++) {\n				if (path[x] == '') continue;\n	\n				prev += (x==0 ? '' : separator) + path[x];\n				target += this.pathSeparator + prev;\n			}\n	\n			this.selectPath(target, null, function(success, selNode){\n				if (!success) {\n					// if that path is a Windows share, try adding it to the tree\n					var result = input.getValue().match(/^\\\\\\\\[\\_\\w\\-]+\\\\[\\-\\_\\w ]+[^\\\\]/);\n					if (result) {\n						var root = this.getRootNode();\n						root.appendChild(new Ext.tree.AsyncTreeNode({\n							id: result[0],\n							text: result[0],\n							iconCls: 'x-tree-node-alwayscollapsed'\n						}));\n						this.selectMyPath();\n					}\n				}\n			}.createDelegate(this));\n		},\n	\n		// select path (if available) or try to add it to the tree if it's a network share\n		showPath: function(){\n			var input = Ext.get(this.input);\n			if (input == null || input.getValue() == null)\n				return;\n	\n			SqueezeJS.Controller.request({\n				params: [\"\",\n					[\n						'pref',\n						'validate',\n						'audiodir',\n						input.getValue()\n					]\n				],\n	\n				scope: this,\n	\n				success: function(response, options){\n					var result = Ext.util.JSON.decode(response.responseText);\n	\n					if (result.result.valid == '1')\n						this.selectMyPath();\n	\n					else\n						input.highlight('#ff8888');\n	\n				}\n			});\n		}\n	});\n\n}\n\n\n\nif (Ext.Window && SqueezeJS.UI.FileSelector) {\n\n	SqueezeJS.UI.FilesystemBrowser = {\n		init: function(){\n			var inputEl, btnEl, filter, classes, start;\n	\n			var tpl = new Ext.Template('&nbsp;<input type=\"button\" value=\"' + SqueezeJS.string('browse') + '\" onclick=\"SqueezeJS.UI.FilesystemBrowser.show(\\'{inputField}\\', \\'{filter}\\')\">');\n			tpl.compile();\n	\n			// try to get the filter expression from the input fields CSS class\n			// selectFolder - only display folders\n			// selectFile   - display any filetype\n			// selectFile_X - only show files of the type X (eg. selectFile_xml -> .xml only)\n			var items = Ext.query('input.selectFolder, input[class*=selectFile]');\n			for(var i = 0; i < items.length; i++) {\n	\n				if (inputEl = Ext.get(items[i])) {\n					filter = '';\n	\n					if (inputEl.hasClass('selectFolder'))\n						filter = 'foldersonly'\n	\n					else {\n						classes = items[i].className.split(' ');\n	\n						for (var x=0; x<classes.length; x++) {\n	\n							if (classes[x].search(/selectFile_/) > -1) {\n								filter += (filter ? '|' : '') + classes[x].replace(/selectFile_/, '');\n							}\n						}\n						if (filter)\n							filter = \"filetype:\" + filter;\n					}\n	\n					btnEl = tpl.insertAfter(inputEl, {\n						inputField: inputEl.id,\n						filter: filter\n					});\n				}\n			}\n		},\n	\n		show: function(inputField, filter){\n			var filesystemDlg = new Ext.Window({\n				modal: true,\n				collapsible: false,\n				width: 350,\n				height: 400,\n				resizeHandles: 'se',\n				html: '<div id=\"filesystembrowser\"></div>',\n				buttons: [{\n					text: SqueezeJS.string('close'),\n					handler: function(){\n						filesystemDlg.close()\n					},\n					scope: filesystemDlg,\n					template: SqueezeJS.UI.buttonTemplate\n				}],\n				listeners: {\n					resize: this.onResize\n				}\n			});\n	\n			filesystemDlg.setTitle(SqueezeJS.string(filter == 'foldersonly' ? 'choose_folder' : 'choose_file'));\n			filesystemDlg.show();\n	\n			new SqueezeJS.UI.FileSelector({\n				renderTo: 'filesystembrowser',\n				input: inputField,\n				filter: filter\n			});\n		},\n		\n		onResize: function() {\n			var el = Ext.get('filesystembrowser');\n			if (el && (el = el.parent())) {\n				el.setWidth(el.getWidth()-12);\n				el.setStyle({ overflow: 'auto' })\n			}\n		}\n	};\n\n}\n\n\n\n// menu highlighter helper classes \nSqueezeJS.UI.Highlight = function(config){\n	this.init(config);\n};\n\nSqueezeJS.UI.Highlight.prototype = {\n	highlightedEl : null,\n	unHighlightTimer : null,\n	isDragging : false,\n\n	init : function(config) {\n		// make sure all selectable list items have a unique ID\n		var items = Ext.DomQuery.select('.selectorMarker');\n		for(var i = 0; i < items.length; i++) {\n			Ext.id(Ext.get(items[i]));\n		}\n\n		if (!this.unHighlightTimer)\n			this.unHighlightTimer = new Ext.util.DelayedTask(this.unHighlight, this);\n\n		var el;\n		if (config && config.unHighlight && (el = Ext.get(config.unHighlight))) {\n			el.on({\n				mouseout: {\n					fn: function(){\n						this.unHighlightTimer.delay(2000);\n					},\n					scope: this\n				},\n				mouseover: {\n					fn: function(){\n						this.unHighlightTimer.cancel();\n					},\n					scope: this\n				}\n			});			\n		}\n	},\n\n	highlight : function(target, onClickCB){\n		// don't highlight while dragging elements around\n		if (this.isDragging)\n			return;\n\n		// return if the target is a child of the main selector\n		var el = Ext.get(target.id); \n		if (el == this.highlightedEl)\n			return;\n\n		// always highlight the main selector, not its children\n		if (el != null) {\n			this.unHighlight();\n			this.highlightedEl = el;\n\n			el.replaceClass('selectorMarker', 'mouseOver');\n\n			this.highlightedEl.onClickCB = onClickCB || this.onSelectorClicked;\n			el.on('click', this.highlightedEl.onClickCB);\n		}\n	},\n\n	unHighlight : function(){\n		// remove highlighting from the other DIVs\n		if (this.highlightedEl) {\n			this.highlightedEl.replaceClass('mouseOver', 'selectorMarker');\n			this.highlightedEl.un('click', this.highlightedEl.onClickCB);\n			this.highlightedEl = null;\n		}\n	},\n\n	onSelectorClicked : function(ev, target){\n		target = Ext.get(target);\n		\n		if (target.hasClass('browseItemDetail') || target.hasClass('playlistSongDetail'))\n			target = Ext.get(target.findParentNode('div'));\n		\n		else if (target.dom.localName = 'img' && !target.findParentNode('span.browsedbControls', 3) && !target.findParentNode('div.playlistControls', 3) \n				&& (target.findParentNode('div.thumbArtwork', 5) || target.findParentNode('div.itemWithCover', 5)))\n			target = Ext.get(target.findParentNode('div'));\n			\n		var el;\n		\n		if ( (el = target.child('a.browseItemLink')) && el.dom.href ) {\n			if (el.dom.target) {\n				try {\n					if (parent.frames[el.dom.target]) {\n						parent.frames[el.dom.target].location.href = el.dom.href;\n					}\n\n					else if (frames[el.dom.target]) {\n						parent.frames[el.dom.target].location.href = el.dom.href;\n					}\n				}\n				catch(e) {\n					location.href = el.dom.href;\n				}\n			}\n			else {\n				location.href = el.dom.href;\n			}\n		}\n		\n		else if ( target.hasClass('slideImage') || (el = target.child('a.slideImage')) ) {\n			if (target.hasClass('slideImage'))\n				el = Ext.get(target);\n\n			// we need different selectors depending on the artwork browse mode chosen\n			var selector = 'div.browseItemDetail a.slideImage';                  // small artwork\n			if (SqueezeJS.getCookie( 'Squeezebox-albumView') == 1)\n				selector = 'div.artworkText a.slideImage';                       // large artwork\n			else if (SqueezeJS.getCookie( 'Squeezebox-albumView') == 2)\n				selector = 'a.slideImage';                                       // text only\n\n			if (Ext.ux.Lightbox)\n				Ext.ux.Lightbox.open(el.dom, selector, true, window);\n			else if (parent.Ext.ux.Lightbox)\n				parent.Ext.ux.Lightbox.open(el.dom, selector, true, window);\n		}\n	}\n}\n\n\nif (Ext.dd && Ext.dd.ScrollManager && Ext.dd.DDProxy) {\n	\n	// create d'n'd sortable panel\n	SqueezeJS.UI.Sortable = function(config){\n		Ext.apply(this, config);\n	\n		Ext.dd.ScrollManager.register(this.el);\n	\n		this.init();\n	};\n	\n	SqueezeJS.UI.Sortable.prototype = {\n		init: function(){\n			var items = Ext.DomQuery.select(this.selector);\n			this.offset |= 0;\n	\n			for(var i = 0; i < items.length; i++) {\n				var item = Ext.get(items[i]);\n	\n				if (!item.hasClass('dontdrag'))\n					item.dd = this.addDDProxy(items[i], this.el, {\n						position: i + this.offset,\n						list: this,\n						droptarget: item.hasClass('droptarget')\n					});\n			}\n	\n			if (this.highlighter)\n				this.highlighter.isDragging = false;\n		},\n		\n		addDDProxy: function(item, el, config){\n			return new SqueezeJS.DDProxy(item, el, config);\n		},\n	\n		onDrop: function(source, target, position) {\n			if (target && source) {\n				var sourcePos = Ext.get(source.id).dd.config.position;\n				var targetPos = Ext.get(target.id).dd.config.position;\n	\n				if (sourcePos >= 0 && targetPos >= 0) {\n					if ((sourcePos > targetPos && position > 0) || (sourcePos < targetPos && position < 0)) {\n						targetPos += position;\n					}\n				}\n	\n				if (target && sourcePos >= 0 && targetPos >= 0 && (sourcePos != targetPos)) {\n					if (position == 0)\n						source.remove();\n	\n					else if (position < 0)\n						source.insertBefore(target);\n	\n					else\n						source.insertAfter(target);\n	\n					this.onDropCmd(sourcePos, targetPos, position);\n					this.init();\n				}\n			}\n		},\n	\n		onDropCmd: function() {}\n	}\n	\n	SqueezeJS.DDProxy = function(id, sGroup, config){\n		SqueezeJS.DDProxy.superclass.constructor.call(this, id, sGroup, config);\n		this.setXConstraint(0, 0);\n		this.scroll = false;\n		this.scrollContainer = true;\n		this.position = 0;\n	};\n	\n	Ext.extend(SqueezeJS.DDProxy, Ext.dd.DDProxy, {\n		// highlight a copy of the dragged item to move with the mouse pointer\n		startDrag: function(x, y) {\n			var dragEl = Ext.get(this.getDragEl());\n			var el = Ext.get(this.getEl());\n			if (this.config.list.highlighter) {\n				this.config.list.highlighter.unHighlight();\n				this.config.list.highlighter.isDragging = true;\n			}\n	\n			dragEl.applyStyles({'z-index':2000});\n			dragEl.update(el.dom.innerHTML);\n			dragEl.addClass(el.dom.className + ' dd-proxy');\n		},\n	\n		// disable the default behaviour which would place the dragged element\n		// we don't need to place it as it will be moved in onDragDrop\n		endDrag: function() {\n			if (this.config.list.highlighter)\n				this.config.list.highlighter.isDragging = false;\n		},\n	\n		onDragOver: function(ev, id){\n			var el = Ext.get(id);\n			var oldPosition = this.position;\n	\n			this.calculatePosition(el.getHeight(), ev.getPageY() - el.getY(), el.dd.config.droptarget);\n	\n			if (oldPosition != this.position) {\n				this.removeDropIndicator(el);\n				this.addDropIndicator(el)\n			}\n		},\n	\n		onDragOut: function(e, id) {\n			this.removeDropIndicator(Ext.get(id));\n		},\n	\n		onDragDrop: function(e, id) {\n			SqueezeJS.UI.Highlight.isDragging = false;\n			this.removeDropIndicator(Ext.get(id));\n			this.config.list.onDrop(Ext.get(this.getEl()), Ext.get(id), this.position);\n		},\n	\n		calculatePosition: function(height, top, droptarget){\n			// target can be dropped on - make it selectable\n			if (droptarget)\n				if (top <= 0.33*height)\n					this.position = -1;\n				else if (top >= 0.6*height)\n					this.position = 1;\n				else\n					this.position = 0;		\n	\n			// target can't be dropped on - only drop below/beneath\n			else\n				if (top <= 0.5*height)\n					this.position = -1;\n				else\n					this.position = 1;		\n		},\n	\n		addDropIndicator: function(el) {\n			if (this.position < 0)\n				el.addClass('dragUp');\n			else if (this.position > 0)\n				el.addClass('dragDown');\n			else\n				el.addClass('dragOver');\n		},\n	\n		removeDropIndicator: function(el) {\n			if (!el)\n				return;\n	\n			el.removeClass('dragUp');\n			el.removeClass('dragDown');\n			el.removeClass('dragOver');\n		}\n	});\n\n}\n\n\nif (SqueezeJS.UI.SplitButton && Ext.MessageBox && Ext.Window) {\n	\n	SqueezeJS.UI.Buttons.PlayerDropdown = Ext.extend(SqueezeJS.UI.SplitButton, {\n		playerList : null,\n	\n		initComponent : function(){\n			Ext.apply(this, {\n				menu: new Ext.menu.Menu(),\n				arrowTooltip: SqueezeJS.string('choose_player')\n			})\n			SqueezeJS.UI.Buttons.PlayerDropdown.superclass.initComponent.call(this);\n	\n			SqueezeJS.Controller.on({\n				serverstatus: {\n					fn: this.onPlayerlistUpdate,\n					scope: this\n				},\n	\n				playerselected: {\n					fn: function(playerobj) {\n						if (playerobj && playerobj.name)\n							this.setText(playerobj.name)\n					},\n					scope: this\n				}\n			});\n		},\n	\n		onPlayerlistUpdate : function(response){\n			this.menu.removeAll();\n			this.menu.add(\n				'<span class=\"menu-title\">' + SqueezeJS.string('choose_player') + '</span>'\n			);\n	\n			// let's set the current player to the first player in the list\n			if (response['player count'] > 0 || response['sn player count'] > 0 || response['other player count'] > 0) {\n				var el;\n	\n				this.playerList = new Ext.util.MixedCollection();\n	\n				this._addPlayerlistMenu(response);\n				this._addSNPlayerlistMenu(response);\n				this._addOtherPlayerlistMenu(response);\n	\n				if (!this.noSync) {\n					// add the sync option menu item\n					this.menu.add(\n						'-',\n						new Ext.menu.Item({\n							text: SqueezeJS.string('synchronize') + '...',\n							// query the currently synced players and show the dialog\n							handler: function(){\n								SqueezeJS.Controller.request({\n									params: ['', ['syncgroups', '?']],\n									success: this.showSyncDialog,\n									failure: this.showSyncDialog,\n									scope: this\n								});	\n							},\n							scope: this,\n							disabled: (this.playerList.getCount() < 2) \n						})\n					);\n				}\n			}\n	\n			else {\n				this.menu.add(\n					new Ext.menu.Item({\n						text: SqueezeJS.string('no_player') + '..',\n						handler: function(){\n							var dlg = new Ext.BasicDialog('', {\n								autoCreate: true,\n								title: SqueezeJS.string('no_player'),\n								modal: true,\n								closable: false,\n								collapsible: false,\n								width: 500,\n								height: 250,\n								resizeHandles: 'se'\n							});\n							dlg.addButton(SqueezeJS.string('close'), dlg.destroy, dlg);\n							dlg.addKeyListener(27, dlg.destroy, dlg);\n							dlg.body.update(SqueezeJS.string('no_player_details'));\n							dlg.show();\n						}\n					})\n				);\n			}\n	\n		},\n	\n		_addPlayerlistMenu : function(response){\n			if (response.players_loop) {\n				response.players_loop = response.players_loop.sort(this._sortPlayer);\n	\n				for (var x=0; x < response.players_loop.length; x++) {\n					var playerInfo = response.players_loop[x];\n					\n					if (!playerInfo.connected)\n						continue;\n	\n					// mark the current player as selected\n					if (playerInfo.playerid == SqueezeJS.Controller.getPlayer()) {\n						this.setText(playerInfo.name);\n					}\n	\n					// add the players to the list to be displayed in the synch dialog\n					this.playerList.add(playerInfo.playerid, {\n						name: playerInfo.name,\n						isplayer: playerInfo.isplayer\n					});\n	\n					var tpl = new Ext.Template( '<div>{title}<span class=\"browsedbControls\"><img src=\"' + webroot + 'html/images/{powerImg}.gif\" id=\"{powerId}\">&nbsp;<img src=\"' + webroot + 'html/images/{playPauseImg}.gif\" id=\"{playPauseId}\"></span></div>')\n					\n					this.menu.add(\n						new Ext.menu.CheckItem({\n							text: tpl.apply({\n								title: playerInfo.name,\n								playPauseImg: playerInfo.isplaying ? 'b_pause' : 'b_play',\n								playPauseId: playerInfo.playerid + ' ' + (playerInfo.isplaying ? 'pause' : 'play'),\n								powerImg: playerInfo.power ? 'b_poweron' : 'b_poweroff',\n								powerId: playerInfo.playerid + ' power ' + (playerInfo.power ? '0' : '1')\n							}),\n							value: playerInfo.playerid,\n							cls: playerInfo.model,\n							group: 'playerList',\n							checked: playerInfo.playerid == playerid,\n							hideOnClick: false,\n							listeners: {\n								click: function(self, ev) {\n									var target = ev ? ev.getTarget() : null;\n									\n									// check whether user clicked one of the playlist controls\n									if ( target && Ext.id(target).match(/^([a-f0-9:]+ (?:power|play|pause)\\b.*)/i) ) {\n										var cmd = RegExp.\$1.split(' ');\n										\n										Ext.Ajax.request({\n											url: SqueezeJS.Controller.getBaseUrl() + '/jsonrpc.js',\n											method: 'POST',\n											params: Ext.util.JSON.encode({\n												id: 1,\n												method: \"slim.request\",\n												params: [cmd.shift(), cmd]\n											}),\n											callback: function() {\n												SqueezeJS.Controller.updateAll();\n											}\n										});\n										return false;\n									}\n								}\n							},\n							scope: this,\n							handler: this._selectPlayer\n						})\n					);\n				}\n			}\n		},\n	\n		_addSNPlayerlistMenu : function(response){\n			// add a list of players connected to SQN, if available\n			if (response.sn_players_loop) {\n				var first = true;\n				response.sn_players_loop = response.sn_players_loop.sort(this._sortPlayer);\n								\n				for (var x=0; x < response.sn_players_loop.length; x++) {\n					var playerInfo = response.sn_players_loop[x];\n	\n					// don't display players which are already connected to SC\n					// this is to prevent double entries right after a player has switched\n					if (! this.playerList.get(playerInfo.playerid)) {\n						if (first) {\n							this.menu.add(\n								'-',\n								new Ext.menu.Item({\n									text: SqueezeJS.string('squeezenetwork'),\n									cls: 'menu-title',\n									scope: this,\n									handler: function(ev){\n										location = 'http://www.mysqueezebox.com/';\n									}\n								})\n							);\n							first = false;\n						}\n	\n						this.menu.add(\n							new Ext.menu.Item({\n								text: playerInfo.name,\n								playerid: playerInfo.playerid,\n								server: 'www.mysqueezebox.com',\n								cls: playerInfo.model,\n								scope: this,\n								dlgTitle: SqueezeJS.string('squeezenetwork'),\n								dlgServer: SqueezeJS.string('squeezenetwork'),\n								handler: this._confirmSwitchPlayer\n							})\n						);\n					}\n				}\n			}\n		},\n	\n		_addOtherPlayerlistMenu : function(response){\n			// add a list of players connected to other servers, if available\n			if (response.other_players_loop) {\n				var playersByServer = this._groupPlayersByServer(response.other_players_loop);\n	\n				playersByServer._servers.each(function(item){\n					var first = true;\n					var players = playersByServer[item].players.sort(this._sortPlayer);\n	\n					for (var x = 0; x < players.length; x++) {\n						var playerInfo = players[x];\n						\n						// don't display players which are already connected to SC\n						// this is to prevent double entries right after a player has switched\n						if (playerInfo && !this.playerList.get(playerInfo.playerid)) {\n							if (first) {\n								this.menu.add(\n									'-',\n									new Ext.menu.Item({\n										text: item,\n										url: playerInfo.serverurl,\n										cls: 'menu-title',\n										scope: this,\n										handler: function(ev){\n											location = ev.url;\n										}\n									})\n								);\n								first = false;\n							}\n		\n							this.menu.add(\n								new Ext.menu.Item({\n									text: playerInfo.name,\n									playerid: playerInfo.playerid,\n									server: playerInfo.server,\n									cls: playerInfo.model,\n									scope: this,\n									dlgTitle: SqueezeJS.string('squeezebox_server'),\n									dlgServer: playerInfo.server,\n									handler: this._confirmSwitchPlayer\n								})\n							);\n						}\n					}\n					\n					return 1;\n				}, this);\n	\n			}\n		},\n	\n		_sortPlayer : function(a, b){\n			a = a.name.toLowerCase();\n			b = b.name.toLowerCase();\n			return a > b ? 1 : (a < b ? -1 : 0);\n		},\n	\n		_groupPlayersByServer : function(players) {\n			var playersByServer = {};\n			playersByServer._servers = new Ext.util.MixedCollection();\n	\n			// group players by server\n			for (var x=0; x < players.length; x++) {\n				// some players can't be switched, as they don't know the SERV command\n				if (players[x].model.match(/http|slimp3|softsqueeze|squeezeslave|squeezebox\$/i))\n					continue;\n				\n				var server = players[x].server;\n	\n				if (playersByServer[server] == null) {\n					playersByServer[server] = {\n						players: new Array(),\n						url: players[x].serverurl\n					}\n	\n					playersByServer._servers.add(server, server);\n				}\n	\n				playersByServer[server].players.push(players[x]);\n			}\n	\n			playersByServer._servers.sort('ASC');\n	\n			return playersByServer;\n		},\n	\n		_selectPlayer: function(item, ev){\n			if (item) {\n				this.setText(item.text || '');\n				SqueezeJS.Controller.selectPlayer(item.value);\n\n				// local players have hideOnClick disabled - but we want them to hide anyway\n				if (!item.hideOnClick) {\n					var pm = item.parentMenu;\n					if (pm.floating) {\n						this.clickHideDelayTimer = pm.hide.defer(item.clickHideDelay, pm, [true]);\n					} else {\n						pm.deactivateActive();\n					}\n				}\n			}\n			else\n				this.setText('');		\n		},\n	\n		_confirmSwitchPlayer: function(ev){\n			var msg = SqueezeJS.string('sc_want_switch');\n			msg.replace(/%s/, ev.dlgServer);\n	\n			Ext.MessageBox.confirm(\n				ev.dlgTitle,\n				SqueezeJS.string('sc_want_switch').replace(/%s/, ev.dlgServer),\n				function(btn){\n					if (btn == 'yes') {\n						this._switchPlayer(ev);\n					}\n				},\n				this\n			);\n		},\n	\n		_switchPlayer: function(ev){\n			SqueezeJS.Controller.request({ params: ['', ['disconnect', ev.playerid, ev.server ]] });\n				\n			// switch player in a few seconds, to give the player time to connect\n			var update = new Ext.util.DelayedTask(function(ev){\n				SqueezeJS.Controller.updateAll();\n				this._selectPlayer({ value: ev.playerid });\n			}, this, new Array(ev));\n			update.delay(3000); \n		},\n	\n		showSyncDialog: function(response){\n			var responseText = Ext.util.JSON.decode(response.responseText);\n	\n			var syncedPlayers = new Array();\n			if (responseText.result && responseText.result.syncgroups_loop) {\n				syncedPlayers = responseText.result.syncgroups_loop;\n			}\n	\n			// make sure any previous syncgroup form is deleted; seems not to happen in on dlg.destroy() in some browsers\n			var playerSelection = Ext.get('syncgroup');\n			if (playerSelection)\n				playerSelection.remove();\n	\n			playerSelection = '<p style=\"margin-right:25px\">' + SqueezeJS.string('setup_synchronize_desc') + '</p>';\n			playerSelection += '<form name=\"syncgroup\" id=\"syncgroup\">';\n			var tpl = new Ext.Template('<input type=\"radio\" id=\"{id}\" value=\"{id}\" {checked} {disabled} name=\"synctarget\">&nbsp;<label for=\"{id}\">{name}</label><br>');\n			tpl.compile();\n	\n			var syncedPlayersList = '';\n			\n			// add sync groups first in the menu\n			for (var i = 0; i < syncedPlayers.length; i++) {\n				\n				var sync_group = syncedPlayers[i].sync_members;\n	\n				if (sync_group) {\n					var members = sync_group.split(',');\n					syncedPlayersList += sync_group;\n	\n					playerSelection += tpl.apply({\n						name: syncedPlayers[i].sync_member_names.replace(/,/g, \",&nbsp;\") || sync_group,\n						id: members[0],\n						checked: sync_group.indexOf(playerid) > -1 ? 'checked=\"checked\"' : '',\n						disabled: ''\n					});\n				}\n			}\n	\n			\n			// create checkboxes for other players and preselect if synced\n			this.playerList.eachKey(function(id, data){\n	\n				if (id && data.name && id != playerid && syncedPlayersList.indexOf(id) == -1) {\n					\n					// unsynced player\n					playerSelection += tpl.apply({\n						name: data.name,\n						id: id,\n						checked: '',\n						disabled: data.isplayer ? '' : 'disabled'\n					});\n				}\n	\n			});\n	\n			// \"Don't sync\" item\n			playerSelection += tpl.apply({\n				name: SqueezeJS.string('setup_no_synchronization'),\n				id: '-',\n				checked: syncedPlayers.length == 0 || syncedPlayers[0] == '-' ? 'checked=\"checked\"' : '',\n				disabled: ''\n			});\n	\n			playerSelection += '</form>';\n	\n			var dlg = new Ext.Window({\n				title: SqueezeJS.string('synchronize'),\n				modal: true,\n				collapsible: false,\n				width: 400,\n				height: 250 + this.playerList.getCount() * 13,\n				autoScroll: true,\n				resizeHandles: 'se',\n				html: playerSelection\n			});\n	\n			dlg.addButton(SqueezeJS.string('synchronize'), function() {\n				var targets = document.forms.syncgroup.synctarget;\n				\n				for (var i = 0; i < targets.length; i++) {\n	\n					if (targets[i].checked) {\n						if (targets[i].value == '-')\n							SqueezeJS.Controller.playerRequest({ params: [ 'sync', '-' ]});\n						else\n							SqueezeJS.Controller.request({ params: [ targets[i].value, [ 'sync', playerid ] ] });\n						break;\n					}\n				}\n	\n				dlg.destroy();\n			}, dlg);\n	\n			dlg.addButton(SqueezeJS.string('cancel'), dlg.destroy, dlg);\n	\n			dlg.show();\n		}\n	});\n\n}\n\n\n\nSqueezeJS.UI.VolumeBar = Ext.extend(SqueezeJS.UI.Component, {\n	power: null,\n	volume : 0,\n\n	initComponent : function(){\n		SqueezeJS.UI.VolumeBar.superclass.initComponent.call(this);\n\n		SqueezeJS.Controller.on({\n			'buttonupdate': {\n				fn: this.onPlayerStateChange,\n				scope: this\n			}\n		});\n\n		this.marginLeft = this.initialConfig.marginLeft || 0;\n		this.marginLeft = this.initialConfig.marginRight || 0;\n\n		if (this.el && (this.el = Ext.get(this.el))) {\n			var el;\n			if (el = this.el.child('img:first'))\n				el.on('click', this.onClick, this);\n		}		\n	},\n\n	onClick: function(ev, target) {\n		if (!this.power)\n			return;\n\n		var el = Ext.get(target);\n		if (el) {\n			var minX = el.getX() + this.marginLeft + 1;\n			var maxX = el.getX() + el.getWidth() - this.marginRight + 1;\n\n			// clicking outside the valid range\n			if (ev.xy[0] <= minX || ev.xy[0] >= maxX)\n				return;\n\n			if (!this.maxWidth)\n				this.maxWidth = maxX - minX;\n\n			if (!this.myStep)\n				this.myStep = this.maxWidth/11;\n\n			var myX = ev.xy[0] - minX;\n\n			myX = Math.max(myX, 1);\n			myX = Math.min(myX, this.maxWidth);\n\n			myX = Math.ceil(myX / this.myStep) - 1;\n			this.updateState(myX*10);\n			SqueezeJS.Controller.setVolume(myX);\n		}\n	},\n\n	// update volume bar\n	onPlayerStateChange: function(result){\n		if (result['mixer volume'] != null)\n			this.updateState(parseInt(result['mixer volume']));\n\n		this.power = result.power;\n	},\n\n	updateState: function(newVolume){\n		if (newVolume != this.volume) {\n			var volEl;\n			var volVal = Math.ceil(newVolume / 9.9); \n\n			if (newVolume <= 0)\n				volVal = 0;\n			else if (newVolume >= 100)\n				volVal = 11;\n\n			this.el.removeClass([ 'ctrlVolume0', 'ctrlVolume1', 'ctrlVolume2', 'ctrlVolume3', 'ctrlVolume4', 'ctrlVolume5', 'ctrlVolume6', 'ctrlVolume7', 'ctrlVolume8', 'ctrlVolume9', 'ctrlVolume10' ]);\n			this.el.addClass('ctrlVolume' + String(Math.max(volVal-1, 0)));\n	\n			if (volEl = this.el.child('img:first'))\n				volEl.dom.title = SqueezeJS.string('volume') + ' ' + parseInt(newVolume);\n\n			this.volume = newVolume;\n		}\n	}\n});\n\n\nSqueezeJS.UI.Title = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.title(result, this.noLink));\n	}\n});\n\n// title without disc/track numbers\nSqueezeJS.UI.RawTitle = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.title(result, this.noLink, true));\n	}\n});\n\nSqueezeJS.UI.TrackNo = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(result.playlist_loop[0].tracknum ? result.playlist_loop[0].tracknum + '. ' : '');\n	}\n});\n\nSqueezeJS.UI.CompoundTitle = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		var title = SqueezeJS.SonginfoParser.title(result, this.noLink);\n		var contributors = SqueezeJS.SonginfoParser.contributors(result, this.noLink);\n		var album = SqueezeJS.SonginfoParser.album(result, this.noLink, true);\n\n		this.el.update(title\n			+ (contributors ? '&nbsp;' + SqueezeJS.string('by') + '&nbsp;' + contributors : '')\n			+ (album ? '&nbsp;' + SqueezeJS.string('from') + '&nbsp;' + album : '')\n		);\n	}\n});\n\nSqueezeJS.UI.Album = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		var year = SqueezeJS.SonginfoParser.year(result, this.noLink);\n		this.el.update(SqueezeJS.SonginfoParser.album(result, this.noLink)\n			+ (year ? '&nbsp;(' + year + ')' : ''));\n	}\n});\n\nSqueezeJS.UI.AlbumTitle = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.album(result, this.noLink));\n	}\n});\n\nSqueezeJS.UI.AlbumYear = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.year(result, this.noLink));\n	}\n});\n\nSqueezeJS.UI.Contributors = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.contributors(result, this.noLink));\n	}\n});\n\n\nSqueezeJS.UI.CurrentIndex = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(result.playlist_cur_index == null ? '0' : (parseInt(result.playlist_cur_index) + 1));\n	}\n});\n\nSqueezeJS.UI.SongCount = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(parseInt(result.playlist_tracks) || '0');\n	}\n});\n\nSqueezeJS.UI.Bitrate = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.bitrate(result, this.noLink));\n	}\n});\n\nSqueezeJS.UI.Playtime = Ext.extend(SqueezeJS.UI.Component, {\n	initComponent : function(config){\n		if (typeof config == 'string')\n			config = { el: config };\n\n		Ext.apply(this, config);\n		SqueezeJS.UI.Playtime.superclass.initComponent.call(this);\n	\n		SqueezeJS.Controller.on({\n			playtimeupdate: {\n				fn: this.onPlaytimeUpdate,\n				scope: this\n			}\n		});\n	},\n\n	onPlaytimeUpdate : function(playtime){\n		if (this.el && playtime)\n			this.el.update(SqueezeJS.Utils.formatTime(playtime.current));\n	}\n});\n\nSqueezeJS.UI.PlaytimeRemaining = Ext.extend(SqueezeJS.UI.Playtime, {\n	onPlaytimeUpdate : function(playtime){\n		if (this.el && playtime)\n			this.el.update(SqueezeJS.Utils.formatTime(playtime.remaining));\n	}\n});\n\nSqueezeJS.UI.Duration = Ext.extend(SqueezeJS.UI.Playtime, {\n	onPlaytimeUpdate : function(playtime){\n		if (this.el && playtime)\n			this.el.update(SqueezeJS.Utils.formatTime(playtime.duration));\n	}\n});\n\nSqueezeJS.UI.CompoundPlaytime = Ext.extend(SqueezeJS.UI.Playtime, {\n	onPlaytimeUpdate : function(playtime){\n		if (this.el && playtime)\n			this.el.update(SqueezeJS.Utils.formatTime(playtime.current) + '&nbsp;/&nbsp;' + SqueezeJS.Utils.formatTime(playtime.remaining));\n	}\n});\n\nSqueezeJS.UI.PlaytimeProgress = Ext.extend(SqueezeJS.UI.Playtime, {\n	initComponent : function(config){\n		SqueezeJS.UI.PlaytimeProgress.superclass.initComponent.call(this);\n\n		var el = Ext.get(this.applyTo);\n		el.update( '<img src=\"/html/images/spacer.gif\" class=\"progressLeft\"/><img src=\"/html/images/spacer.gif\" class=\"progressFillLeft\"/>'\n			+ '<img src=\"/html/images/spacer.gif\" class=\"progressIndicator\"/><img src=\"/html/images/spacer.gif\" class=\"progressFillRight\"/>'\n			+ '<img src=\"/html/images/spacer.gif\" class=\"progressRight\"/>' );	\n\n		// store the DOM elements to reduce flicker\n		this.remaining = Ext.get(Ext.DomQuery.selectNode('.progressFillRight', el.dom));\n		this.playtime = Ext.get(Ext.DomQuery.selectNode('.progressFillLeft', el.dom));\n		\n		// calculate width of elements which won't be scaled\n		this.fixedWidth = el.child('img.progressLeft').getWidth();\n		this.fixedWidth += el.child('img.progressRight').getWidth();\n		this.fixedWidth += el.child('img.progressIndicator').getWidth();\n\n		Ext.get(this.applyTo).on('click', this.onClick);\n\n		if (Ext.ToolTip) {\n			this.tooltip = new Ext.ToolTip({\n				target: 'ctrlProgress',\n				anchor: 'bottom',\n				dismissDelay: 30000,\n				hideDelay: 0,\n				showDelay: 0,\n				trackMouse: true,\n				listeners: {\n					'move': {\n						fn: function(tooltip, x, y) {\n							// don't know why we need the additional 10px offset...\n							var pos = Math.max(x - this.el.getX() + this.fixedWidth + this.offset + 10, 0);\n							pos = pos / Math.max(this.el.getWidth(), pos);\n\n							tooltip.update(SqueezeJS.Utils.formatTime(pos * SqueezeJS.Controller.playerStatus.duration));\n						},\n						scope: this\n					}\n				}\n			});\n		}\n	},\n\n	onPlaytimeUpdate : function(playtime){\n		if (this.el && playtime) {\n			var left;\n			var max = this.el.getWidth() - this.fixedWidth;\n\n			if (isNaN(this.offset))\n				this.offset = max > 0 ? 1 : 11;\n\n			if (max == 0)\n				return;\n			\n			max -= this.offset; // total of left/right/indicator width\n\n			// if we don't know the total play time, just put the indicator in the middle\n			if (!playtime.duration) {\n				left = 0;\n				if (this.tooltip)\n					this.tooltip.disable();\n			}\n			// calculate left/right percentage\n			else {\n				left = Math.max(\n						Math.min(\n							Math.floor(playtime.current / playtime.duration * max)\n						, max)\n					, 1);\n\n				if (this.tooltip)\n					this.tooltip.enable();\n			}\n\n			this.remaining.setWidth(max - left);\n			this.playtime.setWidth(left);\n		}\n	},\n\n	onClick : function(ev) {\n		if (! (SqueezeJS.Controller.playerStatus.duration && SqueezeJS.Controller.playerStatus.canSeek))\n			return;\n \n		var pos = Math.max(ev.xy[0] - this.getX(), 0);\n		pos = pos / Math.max(this.getWidth(), pos);\n		\n		SqueezeJS.Controller.playerControl(['time', pos * SqueezeJS.Controller.playerStatus.duration]);\n	}\n});\n\nSqueezeJS.UI.Coverart = Ext.extend(SqueezeJS.UI.Component, {\n	onPlayerStateChange : function(result){\n		this.el.update(SqueezeJS.SonginfoParser.coverart(result, this.noLink, this.size));\n	}\n});\n\n\n\nif (Ext.ToolTip) {\n\n	SqueezeJS.UI.CoverartPopup = Ext.extend(Ext.ToolTip, {\n		initComponent : function(){\n			if (this.songInfo)\n				this.title = '&nbsp;';\n	 \n			this.dismissDelay = 0;\n			this.hideDelay = 500;\n				\n			SqueezeJS.UI.CoverartPopup.superclass.initComponent.call(this);\n	\n			// let's try to size the width at a maximum of 80% of the current screen size or 500 (as the background image is only 500)\n			this.maxWidth = Math.min(Ext.lib.Dom.getViewWidth(), Ext.lib.Dom.getViewHeight()) * 0.8;\n			this.maxWidth = Math.min(this.maxWidth, 500);\n	\n			SqueezeJS.Controller.on({\n				playerstatechange: {\n					fn: this.onPlayerStateChange,\n					scope: this\n				}\n			});\n	\n			this.on({\n				show: {\n					fn: function(el){\n						if (el && el.body \n							&& (el = el.body.child('img:first', true)) \n							&& (el = Ext.get(el))\n							&& (el.getWidth() > this.maxWidth))\n								el.setWidth(this.maxWidth - 10);\n					}\n				}\n			});\n	\n			Ext.EventManager.onWindowResize(function(){\n				this.maxWidth = Math.min(Ext.lib.Dom.getViewWidth(), Ext.lib.Dom.getViewHeight()) * 0.8;\n				this.maxWidth = Math.min(this.maxWidth, 500);\n			}, this);\n		},\n	\n		onPlayerStateChange : function(result){\n			if (this.songInfo) {\n				var title = SqueezeJS.SonginfoParser.title(result, true);\n				var contributors = SqueezeJS.SonginfoParser.contributors(result, true);\n				var album = SqueezeJS.SonginfoParser.album(result, true, true);\n		\n				this.setTitle(title\n					+ (contributors ? '&nbsp;/ ' + contributors : '')\n					+ (album ? '&nbsp;/ ' + album : ''));\n			}\n	\n			var el = this.body;\n			if (el) {\n				if (el = el.child('img:first', true)) {\n					el.src = SqueezeJS.SonginfoParser.coverartUrl(result);\n					el.srcset = el.src;\n				}\n			}\n			else {\n				this.html = SqueezeJS.SonginfoParser.coverart(result, true);\n			}\n		}\n	});\n\n}\n\n\n\nSqueezeJS.UI.Playlist = Ext.extend(SqueezeJS.UI.Component, {\n	_resizeTask: null,\n	\n	initComponent : function(){\n		SqueezeJS.UI.Playlist.superclass.initComponent.call(this);\n\n		this.container = Ext.get(this.renderTo);\n		this.onResize();\n		\n		this._resizeTask = new Ext.util.DelayedTask(function(){ this.onResize(); }, this);\n\n		Ext.EventManager.onWindowResize(function(){\n			this._resizeTask.delay(100);\n		}, this);\n		\n		SqueezeJS.Controller.on({\n			playerselected: {\n				fn: this.onPlayerSelected,\n				scope: this\n			}\n		});\n	},\n\n	load : function(url, showIndicator){\n		if (this.getPlEl() && SqueezeJS.UI.Sortable)\n			// unregister event handlers\n			Ext.dd.ScrollManager.unregister(this.playlistEl);\n\n		// try to reload previous page if no URL is defined\n		var um = this.container.getUpdateManager();\n\n		if (showIndicator)\n			this.container.getUpdateManager().showLoadIndicator = true;\n\n		this.container.load(\n			{ url: (url || this.url || webroot + 'playlist.html?ajaxRequest=1&player=' + SqueezeJS.getPlayer()) + '&uid=' + Date.parse(Date()) },\n			{},\n			this._onUpdated.createDelegate(this),\n			true\n		);\n\n		um.showLoadIndicator = false;\n	},\n\n	getPlEl : function(){\n		return Ext.get(this.playlistEl);\n	},\n\n	onUpdated : function(){},\n	\n	_onUpdated : function(o){\n		this.onResize();\n\n		var el = this.getPlEl();\n		if (el && (el = el.child('div.noPlayerPanel')))\n			el.setDisplayed(true);			\n\n		// shortcut if there's no player\n		if (!this.getPlEl())\n			return;\n\n		this.Highlighter.unHighlight();\n		this._initSortable();\n		this.highlightCurrent();\n\n		this.onUpdated(o);\n	},\n\n	_initSortable : function(){\n		if (!SqueezeJS.UI.Sortable)\n			return;\n		\n		var offset = 0;\n		if (offset = Ext.get('offset'))\n			offset = parseInt(offset.dom.innerHTML);\n\n		new SqueezeJS.UI.Sortable({\n			el: this.playlistEl,\n			offset: offset,\n			selector: '#' + this.playlistEl + ' div.draggableSong',\n			highlighter: this.Highlighter,\n			onDropCmd: function(sourcePos, targetPos) {\n				SqueezeJS.Controller.playerControl(\n					[\n						'playlist',\n						'move',\n						sourcePos, targetPos\n					],\n				true);\n			}\n		});\n	},\n\n	onPlaylistChange : function() {\n		this.load();\n	},\n\n	onPlayerSelected : function() {\n		this.load();\n	},\n\n	onResize : function(){\n		var el = this.container.parent().parent();\n		var plEl = this.getPlEl();\n		\n		if (el == null || plEl == null)\n			return;\n		\n		var height = el.getHeight() + el.getTop() - plEl.getTop();\n		if (el = Ext.get('playlistTab'))\n			height -= el.getHeight();\n\n		plEl.setHeight(height);\n	},\n\n	highlightCurrent : function(){\n		var el;\n		if (el = this.getPlEl()) {\n			var plPos = el.getScroll();\n			var plView = el.getViewSize();\n			var el = Ext.DomQuery.selectNode(this.currentSelector);\n\n			if (el) {\n				el = Ext.get(el);\n				if (el.getTop() > plPos.top + plView.height\n					|| el.getBottom() < plPos.top)\n						this.scrollIntoView(el);\n			}\n		}\n	},\n\n	// overwriting Element.scrollIntoView\n	// to have the element centered, not at the top/bottom border\n	scrollIntoView : function(el) {\n		var c = Ext.getDom(this.playlistEl);\n		var elDom = el.dom;\n		\n		var o = el.getOffsetsTo(c),\n		    t = o[1] + c.scrollTop,\n		    b = t + elDom.offsetHeight;\n\n		c.scrollTop = b - c.clientHeight + this.container.dom.scrollHeight / 2;;\n		c.scrollTop = c.scrollTop; // corrects IE, other browsers will ignore\n	},\n			\n	request : function(cmd, el) {\n		// don't accept new commands while the playlist is updating\n		var um = this.getPlEl().getUpdateManager();\n\n		if (um && um.isUpdating())\n			return;\n\n		el = Ext.get(el);\n		if (el.dd && el.dd.config && parseInt(el.dd.config.position) >= 0)\n			SqueezeJS.Controller.playerControl(['playlist', cmd, el.dd.config.position])\n	}\n});\n\n\nif (Ext.slider && Ext.slider.SingleSlider) {\n	\n	SqueezeJS.UI.SliderInput = Ext.extend(Ext.slider.SingleSlider, {\n		tpl: new Ext.Template('<span></span>'),\n	\n		initComponent : function(){\n			this.input = Ext.get(this.initialConfig.input);\n	\n			this.renderTo = this.tpl.insertBefore(this.input, {}, true);\n			\n			// if no initial value has been configured,\n			// try reading it from our input field\n			if (this.initialConfig.value == null) {\n				this.values = [ isNaN(parseInt(this.input.dom.value)) ? this.minValue : parseInt(this.input.dom.value) ];\n			}\n			else {\n				this.values = [ parseInt(this.initialConfig.value) ]\n			}\n			\n			SqueezeJS.UI.SliderInput.superclass.initComponent.call(this);\n			\n			this.on({\n				dragstart: {\n					fn: this.onSlide\n				},\n				drag: {\n					fn: this.onSlide\n				},\n				change: {\n					fn: this.onSlide\n				},\n				dragend: {\n					fn: function(){\n						// trigger validation for settings\n						this.input.focus();\n						this.input.blur();\n					}\n				}\n			});\n			\n			this.input.on({\n				change: {\n					fn: this._onChange,\n					scope: this\n				},\n				keyup: {\n					fn: this._onChange,\n					scope: this\n				}\n			});\n		},\n		\n		inputChangeDelay: new Ext.util.DelayedTask(),\n	\n		_onChange: function(ev, input) {\n			this.inputChangeDelay.delay(500, function(input){\n				// sanity check input values, don't accept non-numerical values\n				if (input.value != '' && input.value != '-' && isNaN(parseInt(input.value)))\n					input.value = input.defaultValue;\n				else if (input.value != '' && input.value != '-')\n					input.value = parseInt(input.value);\n		\n				this.setInputValue(input.value);\n		\n			}, this, [input]);\n		},\n	\n		setInputValue: function(v){\n			v = parseInt(v);\n			if (isNaN(v))\n				v = 0;\n				\n			this.setValue(v);\n		},\n		\n		onSlide : function(){\n			this.input.dom.value = this.getValue();\n		}\n	});\n\n}\n\n\nSqueezeJS.UI.ShowBriefly = Ext.extend(Ext.Component, {\n	initComponent : function(){\n		SqueezeJS.UI.ShowBriefly.superclass.initComponent.call(this);\n\n		this.template = (this.template ? new Ext.Template(this.template) : new Ext.Template('{msg}'));\n\n		// subscribe to some default events\n		SqueezeJS.Controller.on({\n			showbriefly: {\n				fn: this.onShowBriefly,\n				scope: this\n			}\n		});\n	},\n\n	onShowBriefly : function(text){\n		if (!this.el)\n			this.el = Ext.get(this.initialConfig.renderTo);\n		\n		if (!this.el)\n			return;\n\n		if (text && !this.el.hasActiveFx()) {\n			this.template.overwrite(this.el, { msg: text });\n			this.animate();\n		}\n		else if (!text) {\n			this.el.update('');\n		}\n	},\n\n	animate : function() {\n		this.el.fadeIn().pause(3).fadeOut();\n	}\n});\n\n\n// simple one line scanner information\nSqueezeJS.UI.ScannerInfo = Ext.extend(Ext.Component, {\n	initComponent : function(config){\n		Ext.apply(this, config);\n		SqueezeJS.UI.ScannerInfo.superclass.initComponent.call(this);\n\n		// subscribe to some default events\n		SqueezeJS.Controller.on({\n			scannerupdate: {\n				fn: this.onScannerUpdate,\n				scope: this\n			}\n		});\n	},\n\n	onScannerUpdate : function(result){\n		if (!this.progressEl)\n			this.progressEl = Ext.get(this.initialConfig.renderTo);\n		\n		if (!this.progressEl)\n			return;\n\n		if (result.rescan) {\n			if (!this.progressEl.isVisible())\n				this.showNow();\n\n			var el;\n			if ((el = Ext.get(this.info)) && result.progresstotal)\n				el.show();\n			else if (el)\n				el.hide();\n\n			if (el = Ext.get(this.total)) {\n				Ext.get(this.name).update(result.progressname);\n				Ext.get(this.done).update(result.progressdone || 0);\n				el.update(result.progresstotal || 0);\n			}\n		}\n		else if (this.progressEl.isVisible()) {\n			this.hideNow();\n		}\n	},\n\n	showNow : function(){\n		this.progressEl.fadeIn();\n	},\n\n	hideNow : function(){\n		this.progressEl.fadeOut();\n	}\n});\n\n\n// page oriented scanner information - not configurable nor inheritable\nSqueezeJS.UI.ScannerInfoExtended = function(){\n	var progressTimer;\n\n	return {\n		init: function(config){\n			Ext.apply(this, config);\n\n			progressTimer = new Ext.util.DelayedTask(this.refresh, this);\n			this.refresh();\n		},\n\n		refresh: function(){\n			Ext.Ajax.request({\n				method: 'GET',\n				url: webroot + 'progress.html',\n				params: {\n					type: progresstype,\n					barlen: progressbarlen,\n					player: playerid,\n					ajaxRequest: 1\n				},\n				timeout: 3000,\n				disableCaching: true,\n				success: this._updatePage,\n				failure: function() {\n					progressTimer.delay(5000);\n				},\n				scope: this\n			});\n			\n		},\n\n		onUpdate : function(){},\n\n		_updatePage: function(result){\n			// clean up response to have a correct JSON object\n			result = result.responseText;\n			result = result.replace(/<[\\/]?pre>|\\n/g, '');\n			result = Ext.decode(result);\n\n			// dummy function which can be overwritten by the calling page\n			this.onUpdate(result);\n\n			if (result['scans']) {\n				var elems = ['Name', 'Done', 'Total', 'Active', 'Time', 'Bar', 'Info'];\n				var el, value;\n\n				var scans = result.scans\n				for (var i=0; i<scans.length; i++) {\n					if (el = Ext.get('Info'+(i-1)))\n						el.setDisplayed(false);\n\n					// only show the count if it is more than one item\n					Ext.get('Count'+i).setDisplayed(scans[i].Total ? true : false);\n					Ext.get('progress'+i).setDisplayed(scans[i].Name ? true : false);\n					Ext.get('Info'+i).setDisplayed(scans[i].Info ? true : false);\n\n					for (var j=0; j<elems.length; j++) {\n						if (value = scans[i][elems[j]])\n							Ext.get(elems[j]+i).update(decodeURIComponent(value));\n\n					}\n					\n					// if we don't really have a progress value (eg. done != total) then let's hide the total value\n					if (scans[i]['isActive'] && scans[i]['Done'] && scans[i]['Total'] && parseInt(scans[i]['Done']) >= parseInt(scans[i]['Total'])) {\n						Ext.get('XofY' + i).setDisplayed(false);\n						Ext.get('Total' + i).setDisplayed(false);\n						Ext.get('Bar' + i).setDisplayed(false);\n					}\n					else {\n						Ext.get('XofY' + i).setDisplayed(true);\n						Ext.get('Total' + i).setDisplayed(true);\n						Ext.get('Bar' + i).setDisplayed(true);\n					}\n				}\n				\n				// hide results from previous scans\n				for (var i=scans.length; i<=50; i++) {\n					Ext.get('progress'+i).setDisplayed(false);\n				}\n			}\n\n			if (result.message && result['total_time']) {\n				Ext.get('message').update(decodeURIComponent(result.message) + '<br>' + SqueezeJS.string('total_time') + '&nbsp;' + result.total_time);\n				\n				if (Ext.get('abortscanlink'))\n					Ext.get('abortscanlink').hide();\n			}\n\n			else\n				Ext.get('message').update(decodeURIComponent(result.message));\n\n			progressTimer.delay(5000)\n		}\n	};\n}();\n\n\n// only load the following if Ext.grid is available\nif (Ext.grid && Ext.grid.GridView && Ext.grid.GridPanel) {\n\n	// create sortable table from HTML table, basically a copy of the TableGrid sample\n	// http://extjs.com/deploy/dev/examples/grid/from-markup.html\n	SqueezeJS.UI.SortableTable = function(table, config) {\n		config = config || {};\n	\n		// a few defaults\n		Ext.applyIf(config, {\n			stripeRows: true,\n			enableColumnHide: false,\n			enableHdMenu: false,\n			disableSelection: true,\n			border: false\n		});\n	\n		Ext.apply(this, config);\n		var cf = config.fields || [], ch = config.columns || [];\n		table = Ext.get(table);\n		\n		var ct = table.insertSibling();\n		\n		var fields = [], cols = [];\n		var headers = table.query(\"thead th\");\n		for (var i = 0, h; h = headers[i]; i++) {\n			var text = h.innerHTML;\n			var name = 'tcol-'+i;\n		\n			fields.push(Ext.applyIf(cf[i] || {}, {\n				name: name,\n				mapping: 'td:nth('+(i+1)+')/\@innerHTML'\n			}));\n		\n			cols.push(Ext.applyIf(ch[i] || {}, {\n				'header': text,\n				'dataIndex': name,\n				'width': h.offsetWidth,\n				'tooltip': h.title,\n				'sortable': Ext.get(h).hasClass('sortable')\n			}));\n		}\n		\n		var ds  = new Ext.data.Store({\n			reader: new Ext.data.XmlReader({\n				record:'tbody tr'\n			}, fields)\n		});\n		\n		ds.loadData(table.dom);\n		\n		var cm = new Ext.grid.ColumnModel(cols);\n		\n		if (config.width || config.height) {\n			ct.setSize(config.width || 'auto', config.height || 'auto');\n		} else {\n			ct.setWidth(table.getWidth());\n		}\n		\n		if (config.remove !== false) {\n			table.remove();\n		}\n		\n		Ext.applyIf(this, {\n			'ds': ds,\n			'cm': cm,\n			autoHeight: true,\n			autoWidth: true\n		});\n		\n		SqueezeJS.UI.SortableTable.superclass.constructor.call(this, ct, {});\n	};\n	Ext.extend(SqueezeJS.UI.SortableTable, Ext.grid.GridPanel);\n}\n\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
