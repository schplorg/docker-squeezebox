#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'html/Settings.js',
        'modtime' => '1249312473',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "Settings = {\n	background : null,\n	body : null,\n	layout : null,\n	tp: null,\n\n	init : function(settingsTabs, activeTab){\n		var mainpanel = {\n			layout: 'border',\n			border: false,\n			style: 'z-index: 200;',\n			renderHidden: true,\n			items: [\n				{\n					region: 'north',\n					contentEl: 'header',\n					border: false,\n					margins: '5 5 0 5',\n					height: 40\n				},\n				\n				{\n					region: 'center',\n					layout: 'border',\n					border: false,\n					items: [\n						{\n							region: 'north',\n							contentEl: 'inner_header',\n							border: false,\n							height: 32,\n							margins: '0 15'\n						},\n						{\n							region: 'center',\n							contentEl: 'maincontent',\n							border: false,\n							margins: '0 15'\n						},\n						{\n							region: 'south',\n							contentEl: 'inner_footer',\n							border: false,\n							height: 43,\n							margins: '0 15'\n						}\n					]\n				},\n\n				{\n					region: 'south',\n					contentEl: 'footer',\n					border: false,\n					margins: '0 5 5 5',\n					height: 16\n				}\n			]\n		}\n\n		this.layout = new Ext.Viewport(mainpanel);\n		this.background = Ext.get('background');\n		this.body = Ext.get(document.body);\n		this.maincontent = Ext.get('maincontent');\n\n		SqueezeJS.clearCookie('Squeezebox-playersettings');\n		SqueezeJS.clearCookie('Squeezebox-advancedsettings');\n\n		// cache the offsets we're going to use to resize the background image\n		this.offsets = [\n			this.background.getTop() * 2,\n			this.background.getLeft() * 2,\n			this.maincontent.getTop() + this.body.getHeight() - Ext.get('inner_footer').getTop()\n		];\n\n		this.tp = new Ext.TabPanel({\n			renderTo: 'settingsTabs',\n			plain: true,\n			enableTabScroll: true,\n			animScroll: false,\n			defaults: {\n				listeners: {\n					activate: this.showSettingsPage\n				}\n			},\n			activeTab: activeTab,\n			items: settingsTabs\n		});\n\n		this.tp.on('beforetabchange', function(tb, tab, ev) {\n			var modified = false;\n			\n			try { modified = frames.settings.Settings.Page.isModified(); }\n			catch(e){}\n			\n			if (!modified)\n				return true;\n				\n			return Settings._confirmPageChange(function(btn, a, b){\n				if (btn == 'no' || btn == 'yes') {\n					if (btn == 'yes') {\n						this.submitSettings(function() {\n							tb.activate(tab);\n						});\n\n					}\n\n					this._resetModified();\n\n					if (btn == 'no') {\n						tb.activate(tab);\n					}\n				}\n\n			}.createDelegate(this));\n		}, this);\n\n		new Ext.Button({\n			renderTo: 'cancel',\n			text: SqueezeJS.string('close'),\n			handler: function(){\n				window.open('javascript:window.close();','_self','');\n			}\n		});\n\n		new Ext.Button({\n			renderTo: 'save',\n			text: SqueezeJS.string('apply'),\n			handler: function() {\n				this.submitSettings()\n			},\n			scope: this\n		});\n\n		Ext.EventManager.onWindowResize(this.onResize, this);\n		this.onResize(this.body.getWidth(), this.body.getHeight());\n	},\n\n	showSettingsPage : function(page) {\n		if (page.id == 'PLAYER') {\n			var page2 = SqueezeJS.getCookie('Squeezebox-playersettings');\n\n			if (page2 == null || page2 == 'null' || page2 == '')\n				page = page.url || 'settings/player/basic.html?';\n			else\n				page = page2;\n		}\n\n		else if (page.id == 'ADVANCED_SETTINGS') {\n			page = SqueezeJS.getCookie('Squeezebox-advancedsettings');\n\n			if (page == null || page == 'null' || page == '')\n				page = 'settings/server/formatting.html?';\n		}\n\n		if (typeof page == 'object' && page.url)\n			page = page.url;\n			\n		if (page == null || page == 'null')\n			page = 'settings/server/basic.html?'\n\n		Ext.get('maincontent').dom.src = webroot + page + 'playerid=' + playerid;\n	},\n\n	activate : function(tab) {\n		if (!this.tp)\n			parent.Settings.activate(tab);\n\n		else {\n			this.tp.activate(tab);\n		}\n	},\n\n	submitSettings : function(cb) {\n		try { \n			frames.settings.Settings.Page.submit(cb);\n		}\n		catch(e){ return false; }\n		return true;\n	},\n\n	onResize : function(width, height) {\n		this.background.setHeight(height - this.offsets[0]);\n		this.background.setWidth(width - this.offsets[1]);\n		this.maincontent.setHeight(height - this.offsets[2]);\n		this.tp.autoScrollTabs();\n	},\n\n	_resetModified : function() {\n		try { frames.settings.Settings.Page.resetModified(); }\n		catch(e){}\n	},\n\n	_isModified : function() {\n		var modified = false;\n		try { modified = frames.settings.Settings.Page.isModified(); }\n		catch(e){}\n		return modified;\n	},\n	\n	_confirmPageChange : function(cb) {\n		if (typeof cb == 'string') {\n			var url = cb;\n			cb = function(btn){\n				if (btn == 'no' || btn == 'yes') {\n					if (btn == 'yes') {\n						this.submitSettings(function() {\n							try { frames.settings.location = url; }\n							catch(e) { location = url; }\n						});\n					}\n					else if (btn == 'no') {\n						try { frames.settings.location = url; }\n						catch(e) { location = url; }\n					}\n\n					this._resetModified();\n				}\n			};\n		}\n\n		Ext.Msg.show({\n			title: SqueezeJS.string('settings'),\n			msg: SqueezeJS.string('settings_changed_confirm'),\n			width: 300,\n			closable: false,\n			buttons: Ext.Msg.YESNOCANCEL,\n			fn: cb,\n			scope: this\n		});\n		return false;\n	},\n	\n	resetPlayer : function(url) {\n		Ext.Msg.show({\n			title: SqueezeJS.string('reset_player'),\n			msg: SqueezeJS.string('reset_player_confirm'),\n			width: 300,\n			closable: false,\n			buttons: Ext.Msg.YESNO,\n			fn: function(btn) {\n				if (btn == 'yes') {\n					location = url;\n				}\n			},\n			scope: this\n		});\n	}\n}\n\nSettings.Page = function(){\n	var invalidWarned = false;\n	var modified = false;\n\n	return {\n		init : function(){\n			this.initSliders();\n			this.showWarning();\n			this.initDescPopup();\n			this.showRestartMessage();\n			this.showRescanMessage();\n\n			SqueezeJS.UI.FilesystemBrowser.init();\n			SqueezeJS.UI.ScrollPanel.init();\n\n			var items = Ext.query('input');\n			for (var i = 0; i < items.length; i++) {\n				var inputEl;\n\n				if (inputEl = Ext.get(items[i])) {\n					if (inputEl.dom.type == 'submit')\n						continue;\n\n					inputEl.on('keypress', function(ev){\n						// on Mac I get 12 instead of 13 (RETURN) on Enter\n						if (ev.button == ev.RETURN || ev.button == 12) {\n							ev.stopEvent();\n							Settings.Page.submit();\n						}\n					});\n				}\n			}\n\n			Ext.select('input, textarea, select').on({\n				change: {\n					fn: this._checkModified\n				},\n				blur: {\n					fn: this._checkModified\n				}\n			});\n		},\n\n		initDescPopup : function(){\n			var section, descEl, desc, helpEl, title;\n\n			var tpl = new Ext.Template('<img src=\"' + webroot + 'html/images/details.gif\" class=\"prefHelp\">');\n			tpl.compile();\n\n			var items = Ext.query('div.hiddenDesc');\n			for(var i = 0; i < items.length; i++) {\n				descEl = Ext.get(items[i]);\n\n				if (descEl)\n					section = descEl.up('div.settingGroup', 1) || Ext.get(items[i]).up('div.settingSection', 1);\n				else\n					continue;\n\n				title = section.child('div.prefHead');\n				if (title)\n					title = title.dom.innerHTML;\n\n				if (section && (desc = descEl.dom.innerHTML)) {\n						helpEl = tpl.insertAfter(descEl);\n						helpEl = Ext.get(helpEl);\n						Ext.apply(helpEl, {\n							qt: new Ext.ToolTip({\n									target: helpEl,\n									html: desc,\n									title: title,\n									dismissDelay: 0,\n									hideDelay: 3000,\n									maxWidth: 300\n								})\n						});\n						helpEl.on('click', function(){this.qt.show();})\n				}\n			}\n		},\n\n		initPlayerList : function(playerList){\n			if (!Ext.get('playerSelector'))\n				return;\n\n			var playerChooser = new SqueezeJS.UI.SplitButton({\n				renderTo: 'playerSelector',\n				menu: new Ext.menu.Menu({shadow: Ext.isGecko && Ext.isMac ? true : 'sides'}),\n				arrowTooltip: SqueezeJS.string('choose_player')\n			});\n\n\n			playerList = playerList.sort(function(a, b){\n				a = a.name.toLowerCase();\n				b = b.name.toLowerCase();\n				return a > b ? 1 : (a < b ? -1 : 0);\n			});\n\n			for (var x=0; x<playerList.length; x++){\n				if (playerList[x].current) {\n					playerChooser.setText(playerList[x].name);\n				}\n\n				playerChooser.menu.add(\n					new Ext.menu.CheckItem({\n						text: playerList[x].name,\n						value: playerList[x].id,\n						checked: playerList[x].current,\n						cls: playerList[x].model,\n						group: 'playerList',\n						handler: function(ev) {\n							this._confirmPageChange(\n								location.pathname + '?playerid=' + ev.value\n							);\n						},\n						scope: this\n					})\n				);\n			}\n		},\n\n		initSettingsList : function(settingsList){\n			if (!Ext.get('settingsSelector'))\n				return;\n\n			var settingsChooser = new SqueezeJS.UI.SplitButton({\n				renderTo: 'settingsSelector',\n				menu: new Ext.menu.Menu({shadow: Ext.isGecko && Ext.isMac ? true : 'sides'}),\n				arrowTooltip: SqueezeJS.string('settings')\n			});\n\n			for (var x=0; x<settingsList.length; x++){\n				if (settingsList[x].current) {\n					settingsChooser.setText(settingsList[x].name);\n				}\n\n				settingsChooser.menu.add(\n					new Ext.menu.CheckItem({\n						text: settingsList[x].name,\n						value: settingsList[x].url,\n						checked: settingsList[x].current,\n						cls: 'settingsList',\n						group: 'settingsList',\n						handler: function(ev) {\n							this._confirmPageChange(\n								webroot + ev.value + 'playerid=' + playerid\n							);\n						},\n						scope: this\n					})\n				);\n			}\n		},\n		\n		initSliders : function() {\n			var items = Ext.query('input[class*=sliderInput_]');\n			var inputEl;\n			\n			for(var i = 0; i < items.length; i++) {\n	\n				if (inputEl = Ext.get(items[i])) {\n					var min, max, increment;\n					min = 0;\n					max = 100;\n					increment = 1;\n\n					var params = inputEl.dom.className.match(/sliderInput_([-]?\\d+)_(\\d+)_(\\d+)/);\n\n					if (params == null) {\n						params = inputEl.dom.className.match(/sliderInput_([-]?\\d+)_(\\d+)/);\n						min = RegExp.\$1;\n						max = RegExp.\$2;\n					}\n\n					else {\n						min = RegExp.\$1;\n						max = RegExp.\$2;\n						increment = RegExp.\$3;\n					}\n					\n					new SqueezeJS.UI.SliderInput({\n						width: 200,\n						minValue: parseInt(min),\n						maxValue: parseInt(max),\n						increment: parseInt(increment),\n				 		input: inputEl,\n				 		cls: 'settingsSlider'\n					});\n				}\n			}			\n		},\n\n		validatePref : function(myPref, namespace) {\n			SqueezeJS.Controller.request({\n				params: ['', [\n							'pref', \n							'validate', \n							namespace + ':' + myPref, \n							Ext.get(myPref).getValue()\n						]],\n				success: function(response) {\n					if (response && response.responseText) {\n						response = Ext.util.JSON.decode(response.responseText);\n\n						// if preference did not validate - highlight the field\n						if (response.result)\n							Settings.Page.highlightField(myPref, response.result.valid);\n					}\n				}\n				\n			});\n		},\n		\n		submit : function(cb) {\n			var items = Ext.query('input.invalid');\n\n			for(var i = 0; i < items.length; i++) {\n				var inputEl;\n\n				if (inputEl = Ext.get(items[i])) {\n					Settings.Page.highlightField(inputEl.id, false);\n				}\n			}\n\n			// block first attempt to save if there are invalid values\n			if (items.length == 0 || invalidWarned) {\n				if (cb) {\n					Ext.Ajax.request({\n						form: document.forms.settingsForm,\n						callback: cb\n					});\n				}\n				else {\n					document.forms.settingsForm.submit();\n				}\n			}\n			else\n				invalidWarned = true;\n\n			return invalidWarned;\n		},\n\n		highlightField : function(myPref, valid){\n			var el = Ext.get(myPref);\n			\n			if (el) {\n				el.highlight(valid ? '99ff99' : 'ffcccc');\n\n				if (valid)\n					el.replaceClass('invalid', 'valid');\n				else\n					el.replaceClass('valid', 'invalid');\n			}\n		},\n\n		showWarning : function(){\n			var reload;\n			if (reload = Ext.get('popupWarning')) {\n				Ext.MessageBox.alert(SqueezeJS.string('settings'), \n					Ext.util.Format.stripTags(\n						reload.dom.innerHTML.replace(/<br\\/?>/ig, ' ')\n					)\n				);\n				reload.update('');\n			}\n		},\n		\n		showRestartMessage : function() {\n			var reload = Ext.get('restartWarning');\n			if (reload) {\n				var restartUrl = reload.child('a').dom.href;\n				\n				Ext.MessageBox.show({\n					title: SqueezeJS.string('settings'),\n					msg: Ext.util.Format.stripTags(\n						reload.dom.innerHTML.replace(/<br\\/?>/ig, ' ')\n					),\n					buttons: {\n						ok: SqueezeJS.string('restart_now'),\n						cancel: SqueezeJS.string('restart_later')\n					},\n					fn: function(btn, text) {\n						if (btn == 'ok') {\n							location = restartUrl;\n						}\n					}\n				});\n				reload.update('');\n			}\n		},\n		\n		showRescanMessage : function() {\n			var reload = Ext.get('rescanWarning');\n			if (reload) {\n				var restartUrl = reload.child('a').dom.href;\n				\n				Ext.MessageBox.show({\n					title: SqueezeJS.string('settings'),\n					msg: Ext.util.Format.stripTags(\n						reload.dom.innerHTML.replace(/<br\\/?>/ig, ' ')\n					),\n					buttons: Ext.Msg.OKCANCEL,\n					fn: function(btn, text) {\n						if (btn == 'ok') {\n							location = restartUrl;\n						}\n					}\n				});\n				reload.update('');\n			}\n		},\n\n		isModified : function(){\n			var fields = document.forms.settingsForm.elements;\n			for (var x=0; x<fields.length; x++) {\n				document.forms['settingsForm'].elements[x].blur();\n			}\n\n			return modified;\n		},\n\n		_checkModified : function(ev, input){\n			modified = modified || (input.value != input.defaultValue);\n		},\n\n		setModified : function(){\n			modified = true;	\n		},\n		\n		resetModified : function(){\n			modified = false;\n		},\n\n		onResize : function(width, height){\n			Ext.util.CSS.updateRule('.x-menu-list', 'max-height', (height - 50) + 'px');\n		},\n\n		_confirmPageChange : function(url) {\n			var modified = this.isModified();\n\n			if (modified) {\n				try { parent.Settings._confirmPageChange(url); }\n				catch(e) {}\n				return false;\n			}\n			else {\n				location = url;\n			}\n			return true;\n		},\n\n		initCollapsableItems : function(){\n			var el;\n			var items = Ext.DomQuery.select('div.collapsableSection');\n	\n			// collapse/expand items - collapse by default\n			for(var i = 0; i < items.length; i++) {\n				el = Ext.get(items[i]);\n				\n				var panel;\n				if (el) {\n					panel = el.id;\n					panel = panel.replace(/_Header/, '');\n\n					if (panel = Ext.get(panel)) {\n					\n						el.on(\"click\", function(ev, target) {\n							// if the triangle image was clicked, get the parent div\n							if (target.tagName == 'IMG')\n								target = Ext.get(target).parent('div');\n							\n							var subPanel = target.id;\n							subPanel = subPanel.replace(/_Header/, '');\n\n							this.toggleItem(Ext.get(target), subPanel);\n						}, this);\n	\n						panel.enableDisplayMode('block');\n	\n						if (SqueezeJS.getCookie('Squeezebox-expanded-' + panel.id) == '0')\n							this.collapseItem(el, panel);\n		\n						else\n							this.expandItem(el, panel);\n					}\n				}\n			}\n		},\n\n		toggleItem : function(heading, panel){\n			var el = Ext.get(panel);\n\n			if (el) {\n				if (el.isVisible())\n					this.collapseItem(heading, el);\n				else\n					this.expandItem(heading, el);\n			}\n		},\n	\n		expandItem : function(heading, panel){\n			SqueezeJS.setCookie('Squeezebox-expanded-' + panel.id, '1');\n\n			var icon = heading.child('img:first', true);\n			if (icon)\n				Ext.get(icon).addClass('disclosure_expanded');\n\n			if (panel) {\n				panel.setVisible(true);\n			}\n		},\n	\n		collapseItem : function(heading, panel){\n			SqueezeJS.setCookie('Squeezebox-expanded-' + panel.id, '0');\n	\n			if (icon = heading.child('img:first', true))\n				Ext.get(icon).removeClass('disclosure_expanded');\n\n			if (panel){\n				panel.setVisible(false);\n			}\n		}\n	};\n}();\n\nSettings.Alarm = function() {\n	return {\n		sliders: new Array(),\n\n		init: function(alarmId, alarmCount) {\n			var el;\n			if (el = Ext.get('alarm_remove_' + alarmId)) {\n				el.on({\n					click: {\n						fn: function() {\n							Ext.get('alarmtime' + alarmId).dom.value = '';\n							Ext.get('alarm' + alarmId).setDisplayed('none');\n							Ext.get('button' + alarmId).show();\n						}\n					}\n				});\n			}\n\n			if (el = Ext.get('AddAlarm')) {\n				el.on({\n					click: {\n						fn: function() {\n							Ext.get('alarm' + alarmId).show();\n							Ext.get('button' + alarmId).setDisplayed('none');\n						}\n					}\n				});\n			}\n		},	\n		\n		initTimeControls: function(timeFormat, altFormats) {\n			var items = Ext.DomQuery.select('input.timeControl');\n			\n			for (var i = 0; i < items.length; i++) {\n\n				new Ext.form.TimeField({\n					applyTo: items[i],\n					altFormats: (altFormats ? '|' + altFormats : '') + \"g:iA|g:ia|g:i A|g:i a|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H\",\n					increment: 5,\n					format: timeFormat,\n					width: 50,\n					hideTrigger: true\n				});\n			}\n		}\n	};\n}();";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
