#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'html/Main.js',
        'modtime' => '1249312473',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "Main = {\n	background : Ext.get('background'),\n	body : Ext.get(document.body),\n	layout : null,\n\n	init : function(){\n		// overwrite some default Ext values\n		Ext.UpdateManager.defaults.indicatorText = '<div class=\"loading-indicator\">' + SqueezeJS.string('loading') + '</div>';\n		SqueezeJS.UI.buttonTemplate = new Ext.Template(\n			'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr>',\n			'<td></td><td><button type=\"{0}\" style=\"padding:0\" class=\"x-btn-text {2}\"></button></td><td></td>',\n			'</tr></tbody></table>'\n		);\n		SqueezeJS.UI.buttonTemplate.compile();\n\n		SqueezeJS.UI.splitButtonTemplate = new Ext.Template(\n			'<table id=\"{4}\" cellspacing=\"0\" class=\"x-btn {3}\"><tbody class=\"{1}\">',\n			'<tr><td class=\"x-btn-ml\"><i>&#160;</i></td><td class=\"x-btn-mc\"><em class=\"{2}\" unselectable=\"on\"><button type=\"{0}\"></button></em></td><td class=\"x-btn-mr\"><i>&#160;</i></td></tr>',\n			'</tbody></table>'\n		);\n		SqueezeJS.UI.splitButtonTemplate.compile();\n\n		Ext.state.Manager.setProvider(new Ext.state.CookieProvider({\n			expires: new Date(new Date().getTime()+(60*60*24*365*1000))\n		}));\n		\n		SqueezeJS.setCookie('Squeezebox-enableHiDPI', window.devicePixelRatio);\n\n		var leftpanel = {\n			region: 'center',\n			layout: 'border',\n			items: [\n				{\n					region: 'north',\n					contentEl: 'leftheader',\n					border: false,\n					height: 12\n				},\n				{\n					region: 'center',\n					border: false,\n					contentEl: 'leftcontent'\n				},\n				{\n					region: 'south',\n					contentEl: 'leftfooter',\n					border: false,\n					height: 12\n				}\n			],\n			border: false,\n			split: true,\n			minSize: 200,\n			width: '50%'\n		};\n\n		var rightpanel = {\n			region: 'east',\n			layout: 'border',\n			items: [\n				{\n					region: 'north',\n					contentEl: 'rightheader',\n					border: false,\n					height: 12\n				},\n				{\n					region: 'center',\n					border: false,\n					contentEl: 'rightcontent'\n				},\n				{\n					region: 'south',\n					contentEl: 'rightfooter',\n					border: false,\n					height: 12\n				}\n			],\n			border: false,\n			split: true,\n			collapsible: true,\n			collapseMode: 'mini',\n			minSize: 400,\n			listeners: {\n				expand: function() {\n					this.playlist.onResize();\n					new Ext.util.DelayedTask(function(){ this.playlist.onResize(); }, this).delay(250);\n				},\n				scope: this\n			},\n			width: '50%',\n			stateId: 'Squeezebox-panelWidth',\n			stateful: true,\n			header: false\n		};\n\n		var mainpanel = {\n			layout: 'border',\n			border: false,\n			style: 'z-index: 200;',\n			renderHidden: true,\n			items: [\n				{\n					region: 'north',\n					contentEl: 'header',\n					border: false,\n					margins: '5 5 0 5',\n					height: 40\n				},\n				\n				{\n					region: 'center',\n					layout: 'border',\n					border: false,\n					margins: '0 15',\n					items: [leftpanel, rightpanel]\n				},\n\n				{\n					region: 'south',\n					contentEl: 'footer',\n					border: false,\n					margins: '0 5 5 5',\n					height: 40\n				}\n			]\n		};\n\n		this.layout = new Ext.Viewport(mainpanel);\n\n		var el;\n		if (el = Ext.get('scanWarning'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		if (el = Ext.get('newVersion'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n\n		// initialize global controller, which is responsible for all communication with SC\n		SqueezeJS.Controller.init({\n			player: playerid\n		});\n\n		// initialize player control panel\n		this.initPlayerControl();\n\n		new SqueezeJS.UI.Buttons.PlayerDropdown({\n			renderTo: 'playerChooser'\n		});\n\n		// initialize the playlist (right hand side) panel\n		this._playlistInit();\n\n		// initialize message area in footer\n		this.showBrieflyArea = new SqueezeJS.UI.ShowBriefly({\n			renderTo: 'footerInfoText'\n		});\n\n\n		// initialize scanner progress info in footer\n		new SqueezeJS.UI.ScannerInfo({\n			renderTo: 'scanWarning',\n			name: 'progressName',\n			info: 'progressInfo',\n			done: 'progressDone',\n			total: 'progressTotal'\n		});\n\n		// register event handler for left hand side frame: refresh when player is switched\n		SqueezeJS.Controller.on({\n			playerselected: {\n				fn: this.onPlayerSelected\n			}\n		});\n\n		Ext.get('loading').hide();\n		Ext.get('loading-mask').hide();\n\n		// cache the offsets we're going to use to resize the background image\n		this.offsets = [\n			this.background.getTop() * 2,\n			this.background.getLeft() * 2\n		];\n\n		Ext.EventManager.onWindowResize(this.onResize, this);\n		this.onResize(this.body.getWidth(), this.body.getHeight());\n		\n		if (!SqueezeJS.cookiesEnabled())\n			Ext.MessageBox.alert(SqueezeJS.string('squeezebox_server'), SqueezeJS.string('web_no_cookies_warning'));\n	},\n\n	onResize : function(width, height) {\n		Ext.util.CSS.updateRule('.x-menu-list', 'max-height', (height - 50) + 'px');\n		this.background.setHeight(height - this.offsets[0]);\n		this.background.setWidth(width - this.offsets[1]);\n	},\n\n	onPlayerSelected : function(playerobj) {\n		if (playerobj && playerobj.playerid)\n			playerobj = playerobj.playerid\n		else\n			playerobj = SqueezeJS.getPlayer();\n\n		// set the browser frame to use the selected player\n		if (frames.browser && frames.browser.location && frames.browser.location.protocol.match(/^http/)) {\n			frames.browser.location = SqueezeJS.Utils.replacePlayerIDinUrl(frames.browser.location, playerobj);\n		}\n\n		// make the settings link use the new player ID\n		var el;\n		if (el = Ext.get('settingsHRef')) {\n			el.dom.href = SqueezeJS.Utils.replacePlayerIDinUrl(el.dom.href, playerobj);\n		}\n		if (el = Ext.get('settingsBtn')) {\n			el.dom.href = SqueezeJS.Utils.replacePlayerIDinUrl(el.dom.href, playerobj);\n		}		\n	},\n\n	initPlayerControl : function(){\n		new SqueezeJS.UI.Buttons.Rew({\n			renderTo: 'ctrlPrevious',\n			noText:   true,\n			minWidth: 31\n		});\n\n		new SqueezeJS.UI.Buttons.Play({\n			renderTo: 'ctrlTogglePlay',\n			noText:   true,\n			minWidth: 31\n		});\n\n		new SqueezeJS.UI.Buttons.Fwd({\n			renderTo: 'ctrlNext',\n			noText:   true,\n			minWidth: 31\n		});\n\n		new SqueezeJS.UI.Buttons.Repeat({\n			renderTo: 'ctrlRepeat',\n			noText:   true,\n			minWidth: 31\n		});\n\n		new SqueezeJS.UI.Buttons.Shuffle({\n			renderTo: 'ctrlShuffle',\n			noText:   true,\n			minWidth: 31\n		});\n\n		new SqueezeJS.UI.Buttons.VolumeDown({\n			renderTo: 'ctrlVolumeDown',\n			noText:   true,\n			minWidth: 27\n		});\n\n		new SqueezeJS.UI.Buttons.VolumeUp({\n			renderTo: 'ctrlVolumeUp',\n			noText:   true,\n			minWidth: 27\n		});\n\n		new SqueezeJS.UI.VolumeBar({\n			el: 'ctrlVolume',\n			marginLeft: 7,\n			marginRight: 6\n		});\n\n		new SqueezeJS.UI.Buttons.Power({\n			renderTo: 'ctrlPower',\n			noText:   true,\n			minWidth: 24\n		});\n\n		new SqueezeJS.UI.Title('ctrlCurrentTitle');\n		new SqueezeJS.UI.CompoundTitle('ctrlCurrentSongInfoCollapsed');\n		new SqueezeJS.UI.Album('ctrlCurrentAlbum');\n		new SqueezeJS.UI.Contributors('ctrlCurrentArtist');\n		new SqueezeJS.UI.Bitrate('ctrlBitrate');\n		new SqueezeJS.UI.CurrentIndex('ctrlPlayNum');\n		new SqueezeJS.UI.SongCount('ctrlSongCount');\n		\n		new SqueezeJS.UI.Playtime('ctrlPlaytime');\n		new SqueezeJS.UI.CompoundPlaytime('ctrlPlaytimeCollapsed');\n		new SqueezeJS.UI.PlaytimeRemaining('ctrlRemainingTime');\n		new SqueezeJS.UI.PlaytimeProgress('ctrlProgress');\n\n		new SqueezeJS.UI.Coverart({\n			el: 'ctrlCurrentArt',\n			size: 96\n		});\n\n		new SqueezeJS.UI.CoverartPopup({\n			target: 'ctrlCurrentArt',\n			defaultAlign: 'tl-bl'\n		});\n\n		// display song information with coverart in the collapsed mode\n		new SqueezeJS.UI.CoverartPopup({\n			target: 'nowPlayingIcon',\n			defaultAlign: 'tl-bl',\n			songInfo: true\n		});\n\n		new SqueezeJS.UI.Button({\n			renderTo: 'ctrlCollapse',\n			cls:      'btn-collapse-player',\n			tooltip:  SqueezeJS.string('collapse'),\n			minWidth: 18,\n			noText:   true,\n			scope:    this,\n			handler:  this.collapseExpand\n		});\n\n		if (Ext.get('ctrlUndock')) {\n			new SqueezeJS.UI.Button({\n				renderTo: 'ctrlUndock',\n				cls:      'btn-undock',\n				tooltip:  SqueezeJS.string('undock'),\n				minWidth: 16,\n				noText:   true,\n				scope:    this,\n				handler:  function(){\n					window.open(webroot + 'status_header.html?player=' + SqueezeJS.Controller.getPlayer(), 'playerControl', 'width=500,height=100,status=no,menubar=no,location=no,resizable=yes');\n				}\n			});\n		}\n\n		var el;\n		if (el = Ext.get('ctrlCurrentArt'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		if (el = Ext.get('expandedPlayerPanel'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		if (el = Ext.get('collapsedPlayerPanel'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		if (el = Ext.get('ctrlExpand'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		if (el = Ext.get('ctrlCollapse'))\n			el.setVisibilityMode(Ext.Element.DISPLAY);\n\n		// restore player expansion from cookie\n		this.collapseExpand({\n			doExpand: (SqueezeJS.getCookie('Squeezebox-expandPlayerControl') != 'false')\n		});\n\n		new SqueezeJS.UI.Button({\n			renderTo: 'ctrlExpand',\n			cls:      'btn-expand-player',\n			tooltip:  SqueezeJS.string('expand'),\n			minWidth: 18,\n			noText:   true,\n			scope:    this,\n			handler:  this.collapseExpand\n		});\n\n	},\n\n	_playlistInit : function(){\n		this.playlist = new SqueezeJS.UI.Playlist({\n			renderTo: 'playlistPanel',			// the panel where the playlist will be displayed\n			playlistEl: 'playList',				// the actual playlist (the panel less the navigation bar, buttons etc.)\n			currentSelector: 'div.currentSong'	// selector for the current playlist item\n		});\n\n		this.playlist.Highlighter = new SqueezeJS.UI.Highlight();\n\n		this.playlist.onUpdated = function(o){\n			var items = Ext.DomQuery.select('#' + this.playlistEl + ' div.draggableSong');\n			if (items.length > 0) {\n				if (Ext.get('btnPlaylistToggleArtwork')) {\n					var noCover = SqueezeJS.getCookie('Squeezebox-noPlaylistCover') == '1';\n					var menu = new Ext.menu.Menu({\n						items: [\n							new Ext.menu.CheckItem({\n								text: SqueezeJS.string('hide_artwork'),\n								cls: 'albumList',\n								handler: function(){\n									SqueezeJS.setCookie('Squeezebox-noPlaylistCover', 1);\n									this.load();\n								}.createDelegate(this),\n								group: 'noCover',\n								checked: noCover\n							}),\n							new Ext.menu.CheckItem({\n								text: SqueezeJS.string('show_artwork'),\n								cls: 'albumXList',\n								handler: function(){\n									SqueezeJS.setCookie('Squeezebox-noPlaylistCover', 0);\n									this.load();\n								}.createDelegate(this),\n								group: 'noCover',\n								checked: !noCover\n							})\n						]\n					});\n	\n					new SqueezeJS.UI.SplitButton({\n						renderTo: 'btnPlaylistToggleArtwork',\n						icon: webroot + 'html/images/albumlist' + (noCover ? '2' : '0')  + '.gif',\n						cls: 'x-btn-icon',\n						menu: menu,\n						arrowTooltip: SqueezeJS.string('coverart')\n					});\n				}\n	\n				new SqueezeJS.UI.Button({\n					renderTo: 'btnPlaylistClear',\n					cls:      'btn-playlist-clear',\n					tooltip:  SqueezeJS.string('clear_playlist'),\n					minWidth: 32,\n					noText:   true,\n					handler:  function(){\n						SqueezeJS.Controller.playerControl(['playlist', 'clear']);\n						this.load();							// Bug 5709: force playlist to clear\n					}.createDelegate(this)\n				});\n\n				new SqueezeJS.UI.Button({\n					renderTo: 'btnPlaylistSave',\n					cls:      'btn-playlist-save',\n					tooltip:  SqueezeJS.string('save'),\n					minWidth: 32,\n					noText:   true,\n					handler:  function(){\n						frames.browser.location = webroot + 'edit_playlist.html?player=' + SqueezeJS.Controller.getPlayer() + '&saveCurrentPlaylist=1';\n					}\n				});\n\n				this.Highlighter.init({\n					unHighlight : 'playList'\n				});\n			}\n		};\n\n		// IE sucks. It needs a special invitation to load the list.\n		if (Ext.isIE)\n			this.playlist.load();\n	},\n\n	collapseExpand : function(ev){\n		var expandCookie = SqueezeJS.getCookie('Squeezebox-expandPlayerControl');\n		expandCookie = expandCookie == 'false' ? false : true;\n		\n		var doExpand = ev.doExpand == null ? !expandCookie : ev.doExpand;\n\n		var art = Ext.get('ctrlCurrentArt');\n\n		// work around Safari 2 crasher: resize and hide artwork before hiding surrounding DIV\n		if (art && !doExpand) {\n			art.setHeight(0);\n			art.hide();\n		}\n\n		var el;\n		if (el = Ext.get('collapsedPlayerPanel'))\n			el.setVisible(!doExpand);\n\n		if (el = Ext.get('expandedPlayerPanel'))\n			el.setVisible(doExpand);\n\n		if (el = Ext.get('ctrlCollapse'))\n			el.setVisible(doExpand);\n\n		if (el = Ext.get('ctrlExpand'))\n			el.setVisible(!doExpand);\n\n		if (art && doExpand) {\n			art.setHeight(96);\n			art.show();\n		}\n\n		SqueezeJS.setCookie('Squeezebox-expandPlayerControl', doExpand);\n\n		// resize the window if in undocked mode\n		var el = Ext.get('ctrlUndock');\n		if (el && !el.isVisible()) {\n			var width = Ext.get(document.body).getWidth();\n			var height = doExpand ? 200 : 115\n\n			if (Ext.isOpera && doExpand) {\n				height += 15;\n			}\n\n			window.resizeTo(width, height);\n		}\n\n		try { this.playlist.onResize(); }\n		catch(e) {}\n	}\n\n};\n\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
