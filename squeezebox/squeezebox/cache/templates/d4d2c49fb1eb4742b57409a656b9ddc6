#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.21
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => '/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html',
        'modtime' => '1249312473',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 1 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $context->process('settings/header.html');
    $output .=  "\n\n	";
#line 5 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		<input type=\"text\" class=\"stdedit\" name=\"pref_coverArt\" id=\"coverArtID\" value=\"";
#line 4 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $stash->get(['prefs', 0, 'pref_coverArt', 0]);
    $output .=  "\" size=\"40\">\n	";
        $context->include('setting', { 'title' => 'SETUP_COVERART', 'desc' => 'SETUP_COVERART_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n	";
#line 9 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		<input type=\"text\" class=\"stdedit selectFolder\" name=\"pref_artfolder\" id=\"artfolder\" value=\"";
#line 8 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $stash->get(['prefs', 0, 'pref_artfolder', 0]);
    $output .=  "\" size=\"40\">\n	";
        $context->include('setting', { 'title' => 'SETUP_ARTFOLDER', 'desc' => 'SETUP_ARTFOLDER_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n	";
#line 15 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    
    # WRAPPER
    $output .=  do {
        my $output = '';
    $output .=  "\n		";
#line 14 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['prefs', 0, 'pref_guessFileFormats', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    LOOP:   while (! $_tt_error) {
                $stash->{'format'} = $_tt_value;
    $output .=  "\n			<input type=\"text\" class=\"stdedit\" name=\"pref_guessFileFormats";
#line 13 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $stash->get(['loop', 0, 'index', 0]);
    $output .=  "\" id=\"pref_guessFileFormats";
#line 13 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $stash->get(['loop', 0, 'index', 0]);
    $output .=  "\" value=\"";
#line 13 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $stash->get('format');
    $output .=  "\" size=\"40\"><br>\n		";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n	";
        $context->include('setting', { 'title' => 'SETUP_GUESSFILEFORMATS', 'desc' => 'SETUP_GROUP_GUESSFILEFORMATS_DESC', 'content', $output }); 
    };
    
    $output .=  "\n\n";
#line 17 "/usr/share/squeezeboxserver/HTML/EN/settings/server/formatting.html"
    $output .=  $context->process('settings/footer.html');
    $output .=  "\n\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
